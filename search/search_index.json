{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"plantiSMASH Documentation # Welcome to the documentation of plantiSMASH . How to Use plantiSMASH - Public Web Version # The easiest way to get started with plantiSMASH is to use the public webserver . The Glossary explains some of the abbreviations used in plantiSMASH and also provides an overview of the biosynthetic classes that plantiSMASH can detect. Frequently occurring questions can be found in the FAQ section. Please consult the FAQs before raising an Issue on the antiSMASH GitHub page. For more details on how to use plantiSMASH, see our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY. How to Use plantiSMASH - Local Installation # If you need to run many analyses or custom analyses, please download and install a local copy of antiSMASH. Running large-scale analyses locally instead of on the webservice reduces the load and helps us to keep plantiSMASH available for everybody. For instructions on how to install plantiSMASH locally, please see the Install Guide . For developers # This documentation is mainly addressed to users wanting to know more about the individual analyses of plantiSMASH. If you are interested in contributing to antiSMASH or in the technical design, please see the plantiSMASH GitHub Wiki . antiSMASH # If you want to know more about the antiSMASH framework, check the antiSMASH Documentation .","title":"Home"},{"location":"#plantismash-documentation","text":"Welcome to the documentation of plantiSMASH .","title":"plantiSMASH Documentation"},{"location":"#how-to-use-plantismash-public-web-version","text":"The easiest way to get started with plantiSMASH is to use the public webserver . The Glossary explains some of the abbreviations used in plantiSMASH and also provides an overview of the biosynthetic classes that plantiSMASH can detect. Frequently occurring questions can be found in the FAQ section. Please consult the FAQs before raising an Issue on the antiSMASH GitHub page. For more details on how to use plantiSMASH, see our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY.","title":"How to Use plantiSMASH - Public Web Version"},{"location":"#how-to-use-plantismash-local-installation","text":"If you need to run many analyses or custom analyses, please download and install a local copy of antiSMASH. Running large-scale analyses locally instead of on the webservice reduces the load and helps us to keep plantiSMASH available for everybody. For instructions on how to install plantiSMASH locally, please see the Install Guide .","title":"How to Use plantiSMASH - Local Installation"},{"location":"#for-developers","text":"This documentation is mainly addressed to users wanting to know more about the individual analyses of plantiSMASH. If you are interested in contributing to antiSMASH or in the technical design, please see the plantiSMASH GitHub Wiki .","title":"For developers"},{"location":"#antismash","text":"If you want to know more about the antiSMASH framework, check the antiSMASH Documentation .","title":"antiSMASH"},{"location":"about/","text":"About plantiSMASH # plantiSMASH allows the rapid genome-wide identification, annotation, and analysis of specialized metabolite biosynthetic gene clusters (BGCs) across the plant kingdom. It is a specialized extension of the widely used antiSMASH tool, tailored specifically to target plant genomes. News # Version 2.0-beta of plantiSMASH is live now! plantiSMASH is an extension of the widely used tool antiSMASH, now optimized for and made to work on plant genomes. plantiSMASH version 2.0-beta features a range of updates and improvements in the areas of gene cluster identification, homology detection, and substrate prediction: plantiSMASH provides: Specific library of pHMM models and completely novel cluster calling logic designed to work on plant genomes Specific plant clusterblast database from precalculated plant biosynthetic gene clusters Specific training model for gene finding using glimmerHMM Homology based metabolic modeling Coexpression analysis and html-based visualization on detected biosynthetic gene clusters with the CoExpress module To top it off, these are the added features of plantiSMASH ver 2.0-beta: Updated library of pHMM models and the number of detection rules increased from 6 to 12, including 3 rules being updated. Updated plant clusterblast database with precalculated plant biosynthetic gene clusters for 382 NCBI plant genomes. Updated specific module for detection of repeats in BURP domains for candidate cyclopeptide BGCs. Implemented prediction of substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases. Dependencies # plantiSMASH is powered by several open-source tools: NCBI BLAST+ Diamond HMMer 3 Muscle 3 GlimmerHMM CD-HIT PySVG JQuery SVG JQuery DataTables InCHlib vis.js pplacer GraPhlAn plantiSMASH 2.0 contributors # plantiSMASH version 2.0 is the product of a collaborative effort between: Bioinformatics Group , Wageningen University & Research Department of Metabolic Biology , John Innes Centre, Norwich The Robert H. Smith Institute of Plant Sciences and Genetics in Agriculture , Hebrew University of Jerusalem DOE Joint Genome Institute , Lawrence Berkeley National Labs Supported by the Graduate School for Experimental Plant Sciences (EPS) and Vidi Grant VI.Vidi.213.183 from The Netherlands Organization for Scientific Research (NWO). plantiSMASH 1.0 contributors # plantiSMASH version 1.0 was the product of a collaborative effort between: Bioinformatics Group , Wageningen University & Research Department of Informatics Engineering , Lampung University Novo Nordisk Foundation Center for Biosustainability , Technical University of Denmark Department of Metabolic Biology , John Innes Centre, Norwich Supported by the Graduate School for Experimental Plant Sciences (EPS), VENI Grant (#863.15.002) from The Netherlands Organization for Scientific Research (NWO), a Novo Nordisk Foundation Grant, UK Biotechnological and Biological Sciences Research Council (BBSRC) Institute Strategic Programme Grant \"Understanding and Exploiting Plant and Microbial Metabolism\" (BB/J004561/1), the John Innes Foundation, the joint Engineering and Physical Sciences Research Council/BBSRC-funded OpenPlant Synthetic Biology Research Centre grant BB/L014130/1, and a National Institutes of Health Genome to Natural Products Network award U101GM110699. How to cite # If you have found plantiSMASH useful, please cite: plantiSMASH: automated identification, annotation and expression analysis of plant biosynthetic gene clusters. Satria A. Kautsar, Hernando G Suarez Duran, Kai Blin, Anne Osbourn & Marnix H. Medema Nucleic Acids Research, 45(W1), W55-W63. (2017) https://doi.org/10.1093/nar/gkx305","title":"About"},{"location":"about/#about-plantismash","text":"plantiSMASH allows the rapid genome-wide identification, annotation, and analysis of specialized metabolite biosynthetic gene clusters (BGCs) across the plant kingdom. It is a specialized extension of the widely used antiSMASH tool, tailored specifically to target plant genomes.","title":"About plantiSMASH"},{"location":"about/#news","text":"Version 2.0-beta of plantiSMASH is live now! plantiSMASH is an extension of the widely used tool antiSMASH, now optimized for and made to work on plant genomes. plantiSMASH version 2.0-beta features a range of updates and improvements in the areas of gene cluster identification, homology detection, and substrate prediction: plantiSMASH provides: Specific library of pHMM models and completely novel cluster calling logic designed to work on plant genomes Specific plant clusterblast database from precalculated plant biosynthetic gene clusters Specific training model for gene finding using glimmerHMM Homology based metabolic modeling Coexpression analysis and html-based visualization on detected biosynthetic gene clusters with the CoExpress module To top it off, these are the added features of plantiSMASH ver 2.0-beta: Updated library of pHMM models and the number of detection rules increased from 6 to 12, including 3 rules being updated. Updated plant clusterblast database with precalculated plant biosynthetic gene clusters for 382 NCBI plant genomes. Updated specific module for detection of repeats in BURP domains for candidate cyclopeptide BGCs. Implemented prediction of substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases.","title":"News"},{"location":"about/#dependencies","text":"plantiSMASH is powered by several open-source tools: NCBI BLAST+ Diamond HMMer 3 Muscle 3 GlimmerHMM CD-HIT PySVG JQuery SVG JQuery DataTables InCHlib vis.js pplacer GraPhlAn","title":"Dependencies"},{"location":"about/#plantismash-20-contributors","text":"plantiSMASH version 2.0 is the product of a collaborative effort between: Bioinformatics Group , Wageningen University & Research Department of Metabolic Biology , John Innes Centre, Norwich The Robert H. Smith Institute of Plant Sciences and Genetics in Agriculture , Hebrew University of Jerusalem DOE Joint Genome Institute , Lawrence Berkeley National Labs Supported by the Graduate School for Experimental Plant Sciences (EPS) and Vidi Grant VI.Vidi.213.183 from The Netherlands Organization for Scientific Research (NWO).","title":"plantiSMASH 2.0 contributors"},{"location":"about/#plantismash-10-contributors","text":"plantiSMASH version 1.0 was the product of a collaborative effort between: Bioinformatics Group , Wageningen University & Research Department of Informatics Engineering , Lampung University Novo Nordisk Foundation Center for Biosustainability , Technical University of Denmark Department of Metabolic Biology , John Innes Centre, Norwich Supported by the Graduate School for Experimental Plant Sciences (EPS), VENI Grant (#863.15.002) from The Netherlands Organization for Scientific Research (NWO), a Novo Nordisk Foundation Grant, UK Biotechnological and Biological Sciences Research Council (BBSRC) Institute Strategic Programme Grant \"Understanding and Exploiting Plant and Microbial Metabolism\" (BB/J004561/1), the John Innes Foundation, the joint Engineering and Physical Sciences Research Council/BBSRC-funded OpenPlant Synthetic Biology Research Centre grant BB/L014130/1, and a National Institutes of Health Genome to Natural Products Network award U101GM110699.","title":"plantiSMASH 1.0 contributors"},{"location":"about/#how-to-cite","text":"If you have found plantiSMASH useful, please cite: plantiSMASH: automated identification, annotation and expression analysis of plant biosynthetic gene clusters. Satria A. Kautsar, Hernando G Suarez Duran, Kai Blin, Anne Osbourn & Marnix H. Medema Nucleic Acids Research, 45(W1), W55-W63. (2017) https://doi.org/10.1093/nar/gkx305","title":"How to cite"},{"location":"command_line/","text":"Command Line Use # The plantiSMASH command line tool comes with a built-in help system. Use python run_antismash.py -h to display help for the most common options, or python run_antismash.py --help-showall to get a description of all possible options. 1. Run a test dataset # 1.1. Run plantiSMASH on a NCBI reference genome (genebank format) to test # mkdir -p test_datasets/Arabidopsis_thaliana cd test_datasets/Arabidopsis_thaliana datasets download genome accession GCF_000001735.4 --include gbff unzip ncbi_dataset.zip python ../../run_antismash.py --clusterblast --knownclusterblast --verbose --debug --limit -1 --taxon plants --outputfolder result/ ncbi_dataset/data/GCF_000001735.4/genomic.gbff # --clusterblast --knownclusterblast are optional 1.2. Run plantiSMASH on a genome with gff3 + fasta # python run_antismash.py --verbose --debug --limit -1 --taxon plants --outputfolder result/ --use_phase --gff3 path/to/gff3/file path/to/fasta/file # Please check the error message. The genome names in the gff3 file may differ from those in the fasta file, causing an error. Note # It is recommended to change the output folder or delete it every time you run plantiSMASH. Because when using the same output folder, files from the previous run may be partially preserved (only rewriting files with the same names). Customising output # Output directories and custom names for output can be specified, instead of using the input filename by default (see the --output family of arguments).","title":"Starting command line runs"},{"location":"command_line/#command-line-use","text":"The plantiSMASH command line tool comes with a built-in help system. Use python run_antismash.py -h to display help for the most common options, or python run_antismash.py --help-showall to get a description of all possible options.","title":"Command Line Use"},{"location":"command_line/#1-run-a-test-dataset","text":"","title":"1. Run a test dataset"},{"location":"command_line/#11-run-plantismash-on-a-ncbi-reference-genome-genebank-format-to-test","text":"mkdir -p test_datasets/Arabidopsis_thaliana cd test_datasets/Arabidopsis_thaliana datasets download genome accession GCF_000001735.4 --include gbff unzip ncbi_dataset.zip python ../../run_antismash.py --clusterblast --knownclusterblast --verbose --debug --limit -1 --taxon plants --outputfolder result/ ncbi_dataset/data/GCF_000001735.4/genomic.gbff # --clusterblast --knownclusterblast are optional","title":"1.1. Run plantiSMASH on a NCBI reference genome (genebank format) to test"},{"location":"command_line/#12-run-plantismash-on-a-genome-with-gff3-fasta","text":"python run_antismash.py --verbose --debug --limit -1 --taxon plants --outputfolder result/ --use_phase --gff3 path/to/gff3/file path/to/fasta/file # Please check the error message. The genome names in the gff3 file may differ from those in the fasta file, causing an error.","title":"1.2. Run plantiSMASH on a genome with gff3 + fasta"},{"location":"command_line/#note","text":"It is recommended to change the output folder or delete it every time you run plantiSMASH. Because when using the same output folder, files from the previous run may be partially preserved (only rewriting files with the same names).","title":"Note"},{"location":"command_line/#customising-output","text":"Output directories and custom names for output can be specified, instead of using the input filename by default (see the --output family of arguments).","title":"Customising output"},{"location":"faq/","text":"Frequently Asked Questions # Can I run antiSMASH locally as a stand-alone program? # Yes. A stand-alone version of plantiSMASH is available from the download page . Why doesn't plantiSMASH detect my gene cluster? # Some gene clusters, such as cofactor biosynthesis gene clusters are not identified by plantiSMASH, as they are categorized as primary metabolism instead of secondary metabolism. If you are aware of a true secondary metabolite biosynthesis gene cluster that escapes detection by antiSMASH, please contact us, and we will add the models necessary to detect it. Why are several genes upstream and downstream of gene clusters included, even though they do not seem to be part of the gene cluster? # In designing plantiSMASH, we tried to be very conservative in cutting gene cluster borders, leaving this to the expert eye of the user, as it is better to show some extra genes than to leave out key genes. Why is my BGC not detected in full? # The user can specify a different cutoff when running the program as a stand-alone program, by manually editing the cluster rules file, avaialble on the gitHub repository. If you run into such an issue, contact us or open a ticket on GitHub. Can I also submit an unannotated genome sequence in FASTA format? # To enable us to operate the plantiSMASH webserver with the resources available, users are expected to upload annotated Genbank-formatted or fasta files with gene/CDS annotations (i.e. fasta = gff3). Please first run your assembly on gene finding tools of your preference, such as AUGUSTUS or MAKER before submitting it into plantiSMASH. What is the privacy policy of plantiSMASH concerning my sequence data? # We keep this site and the data that it analyses as safe and secure as possible. The randomly generated URL ensures that your data cannot easily be found by third parties. Your output files will be periodically deleted from our server. However, sending your data to the web site is at your own risk. If you are concerned about the sensitivity of your data, please use the stand-alone version of our tool.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#can-i-run-antismash-locally-as-a-stand-alone-program","text":"Yes. A stand-alone version of plantiSMASH is available from the download page .","title":"Can I run antiSMASH locally as a stand-alone program?"},{"location":"faq/#why-doesnt-plantismash-detect-my-gene-cluster","text":"Some gene clusters, such as cofactor biosynthesis gene clusters are not identified by plantiSMASH, as they are categorized as primary metabolism instead of secondary metabolism. If you are aware of a true secondary metabolite biosynthesis gene cluster that escapes detection by antiSMASH, please contact us, and we will add the models necessary to detect it.","title":"Why doesn't plantiSMASH detect my gene cluster?"},{"location":"faq/#why-are-several-genes-upstream-and-downstream-of-gene-clusters-included-even-though-they-do-not-seem-to-be-part-of-the-gene-cluster","text":"In designing plantiSMASH, we tried to be very conservative in cutting gene cluster borders, leaving this to the expert eye of the user, as it is better to show some extra genes than to leave out key genes.","title":"Why are several genes upstream and downstream of gene clusters included, even though they do not seem to be part of the gene cluster?"},{"location":"faq/#why-is-my-bgc-not-detected-in-full","text":"The user can specify a different cutoff when running the program as a stand-alone program, by manually editing the cluster rules file, avaialble on the gitHub repository. If you run into such an issue, contact us or open a ticket on GitHub.","title":"Why is my BGC not detected in full?"},{"location":"faq/#can-i-also-submit-an-unannotated-genome-sequence-in-fasta-format","text":"To enable us to operate the plantiSMASH webserver with the resources available, users are expected to upload annotated Genbank-formatted or fasta files with gene/CDS annotations (i.e. fasta = gff3). Please first run your assembly on gene finding tools of your preference, such as AUGUSTUS or MAKER before submitting it into plantiSMASH.","title":"Can I also submit an unannotated genome sequence in FASTA format?"},{"location":"faq/#what-is-the-privacy-policy-of-plantismash-concerning-my-sequence-data","text":"We keep this site and the data that it analyses as safe and secure as possible. The randomly generated URL ensures that your data cannot easily be found by third parties. Your output files will be periodically deleted from our server. However, sending your data to the web site is at your own risk. If you are concerned about the sensitivity of your data, please use the stand-alone version of our tool.","title":"What is the privacy policy of plantiSMASH concerning my sequence data?"},{"location":"glossary/","text":"Cluster types # plantiSMASH uses some abbreviations internally and in outputs to refer to the different types of secondary metabolite clusters detected. Cluster rules and associated HMM profiles are available in the plantiSMASH GitHub repository . Supported Cluster Types # For an overview of the supported cluster types across versions you can check the changelog . Cluster Type Min. Generic Domains (v1 \u2192 v2) Special Domains (v1 \u2192 v2) Version Added Rule Changes plant * 4 \u2192 4 \u2013 \u2192 \u2013 v1 Expanded generic domain list : added NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , Methyltransf_11 , TPMT , DAHP_synth_1 , DAHP_synth_2 terpene 3 \u2192 3 Same (multi-domain list) v1 No changes saccharide 3 \u2192 3 Glycos_transf_1/2/28 , UDPGT , UDPGT_2 \u2192 + Glyco_hydro_1 , Cellulose_synt v1 Expanded special domains lignan 3 \u2192 3 Dirigent \u2192 Dirigent v1 No changes alkaloid 3 \u2192 3 Bet_v_1 , Cu_amine_oxid , Str_synth \u2192 + BBE , Orn_DAP_Arg_deC , Pyridoxal_deC v1 Expanded rule logic (OR logic) polyketide 3 \u2192 3 Chal_sti_synt_C , Chal_sti_synt_N \u2192 + AMP-binding , Thr_dehydrat_C (alternative rules) v1 Multiple alternative rules added sesterterpene 2 \u2192 2 Same v1 No changes cyclopeptide \u2013 \u2192 \u2013 BURP v2 New rule fatty_acid \u2013 \u2192 3 \u2013 \u2192 FA_desaturase , FA_desaturase_2 , FA_hydroxylase , CER1-like_C , Transferase , ECH_2 , AMP-binding v2 New rule strictosidine_like \u2013 \u2192 2 \u2013 \u2192 Str_synth , Pyridoxal_deC v2 New rule phenolamide \u2013 \u2192 2 \u2013 \u2192 Transferase , Pyridoxal_deC , Orn_DAP_Arg_deC , Orn_Arg_deC_N v2 New rule with OR logic MatE \u2013 \u2192 3 \u2013 \u2192 MatE v2 New rule transporter \u2013 \u2192 3 \u2013 \u2192 LTP_2 , ABC2_membrane , ABC_tran v2 New rule *Putative / uncategorized plant biosynthetic cluster. -- Generic Domains Used in Version 1 vs Version 2 # Generic Domains in Version 1 # cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2 Additional Generic Domains in Version 2 # NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red Deprecated or Merged Types # Putative cluster type Characterized by the presence of Added Removed putative Putative / uncategorized biosynthetic cluster. 1.0 2.0 hybrid Biosynthetic cluster containing signature traces from both A and B secondary metabolite types. 1.0 2.0 Reference Links # For reference, you can find the detection rules for different plantiSMASH versions here: Version 1 Rules: View on GitHub Version 2 Rules: View on GitHub This glossary provides an overview of the secondary metabolite types detected by plantiSMASH. If you have any questions, refer to the documentation or reach out to the development team.","title":"Glossary"},{"location":"glossary/#cluster-types","text":"plantiSMASH uses some abbreviations internally and in outputs to refer to the different types of secondary metabolite clusters detected. Cluster rules and associated HMM profiles are available in the plantiSMASH GitHub repository .","title":"Cluster types"},{"location":"glossary/#supported-cluster-types","text":"For an overview of the supported cluster types across versions you can check the changelog . Cluster Type Min. Generic Domains (v1 \u2192 v2) Special Domains (v1 \u2192 v2) Version Added Rule Changes plant * 4 \u2192 4 \u2013 \u2192 \u2013 v1 Expanded generic domain list : added NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , Methyltransf_11 , TPMT , DAHP_synth_1 , DAHP_synth_2 terpene 3 \u2192 3 Same (multi-domain list) v1 No changes saccharide 3 \u2192 3 Glycos_transf_1/2/28 , UDPGT , UDPGT_2 \u2192 + Glyco_hydro_1 , Cellulose_synt v1 Expanded special domains lignan 3 \u2192 3 Dirigent \u2192 Dirigent v1 No changes alkaloid 3 \u2192 3 Bet_v_1 , Cu_amine_oxid , Str_synth \u2192 + BBE , Orn_DAP_Arg_deC , Pyridoxal_deC v1 Expanded rule logic (OR logic) polyketide 3 \u2192 3 Chal_sti_synt_C , Chal_sti_synt_N \u2192 + AMP-binding , Thr_dehydrat_C (alternative rules) v1 Multiple alternative rules added sesterterpene 2 \u2192 2 Same v1 No changes cyclopeptide \u2013 \u2192 \u2013 BURP v2 New rule fatty_acid \u2013 \u2192 3 \u2013 \u2192 FA_desaturase , FA_desaturase_2 , FA_hydroxylase , CER1-like_C , Transferase , ECH_2 , AMP-binding v2 New rule strictosidine_like \u2013 \u2192 2 \u2013 \u2192 Str_synth , Pyridoxal_deC v2 New rule phenolamide \u2013 \u2192 2 \u2013 \u2192 Transferase , Pyridoxal_deC , Orn_DAP_Arg_deC , Orn_Arg_deC_N v2 New rule with OR logic MatE \u2013 \u2192 3 \u2013 \u2192 MatE v2 New rule transporter \u2013 \u2192 3 \u2013 \u2192 LTP_2 , ABC2_membrane , ABC_tran v2 New rule *Putative / uncategorized plant biosynthetic cluster. --","title":"Supported Cluster Types"},{"location":"glossary/#generic-domains-used-in-version-1-vs-version-2","text":"","title":"Generic Domains Used in Version 1 vs Version 2"},{"location":"glossary/#generic-domains-in-version-1","text":"cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2","title":"Generic Domains in Version 1"},{"location":"glossary/#additional-generic-domains-in-version-2","text":"NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red","title":"Additional Generic Domains in Version 2"},{"location":"glossary/#deprecated-or-merged-types","text":"Putative cluster type Characterized by the presence of Added Removed putative Putative / uncategorized biosynthetic cluster. 1.0 2.0 hybrid Biosynthetic cluster containing signature traces from both A and B secondary metabolite types. 1.0 2.0","title":"Deprecated or Merged Types"},{"location":"glossary/#reference-links","text":"For reference, you can find the detection rules for different plantiSMASH versions here: Version 1 Rules: View on GitHub Version 2 Rules: View on GitHub This glossary provides an overview of the secondary metabolite types detected by plantiSMASH. If you have any questions, refer to the documentation or reach out to the development team.","title":"Reference Links"},{"location":"install/","text":"Download plantiSMASH Standalone # Stand-alone versions of plantiSMASH are available through our GitHub page . Current Release # The current standalone release is plantiSMASH 2.0-beta ( December 16th, 2024 ). Installation Options # There are two ways to install plantiSMASH: Downloading the standalone release \u2013 Suitable for users who want to install plantiSMASH from a zip package and ensure dependencies are installed separately. Cloning from GitHub \u2013 Recommended for users who want the latest development version and prefer managing dependencies in a virtual Conda environment. Option 1: Downloading the standalone release # Download the latest plantiSMASH standalone release from our GitHub repo: https://github.com/plantismash/plantismash/releases Ensure you have the following dependencies installed (tested versions in parentheses): Glimmer (3.02) GlimmerHMM (3.0.4) HMMER3 (3.3.2) HMMER2 (version 2.3.2 tested). plantiSMASH requires hmmpfam2, a legacy tool from HMMER 2. This binary is no longer included in HMMER 3.x and must be installed manuallyappend a 2 to all hmmer2 executables to avoid conflict with hmmer3 executable names, like hmmalign -> hmmalign2 FastTree (2.1.8) DIAMOND (2.0.15) MUSCLE (3.8.31) Prodigal (2.6.3) NCBI Blast+ (2.12.0) CD-HIT (4.8.1) LibXML2 (2.10.3) pplacer NCBI Datasets CLI (16.40.1) Unzip Helperlibs (0.2.1) Biopython (1.76) Once all dependencies are installed, plantiSMASH should be ready to use. Option 2: Cloning from GitHub # Using Windows? Click here for the full Windows Setup Guide . Clone the latest version from GitHub: git clone -b dev https://github.com/plantismash/plantismash.git cd plantismash If not installed already, conda/mamba can be installed by following these instructions: # install miniforge curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh # follow instructions and let it run `conda init` # set default channels source ~/.bashrc conda config --set auto_activate_base false source ~/.bashrc conda config --add channels bioconda conda config --add channels conda-forge conda config --set channel_priority strict Create and activate a Conda environment using the provided environment.yml file conda env create -f environment.yml conda activate plantismash Download the required databases: python download_databases.py Verify the installation python run_antismash.py -h","title":"Installation"},{"location":"install/#download-plantismash-standalone","text":"Stand-alone versions of plantiSMASH are available through our GitHub page .","title":"Download plantiSMASH Standalone"},{"location":"install/#current-release","text":"The current standalone release is plantiSMASH 2.0-beta ( December 16th, 2024 ).","title":"Current Release"},{"location":"install/#installation-options","text":"There are two ways to install plantiSMASH: Downloading the standalone release \u2013 Suitable for users who want to install plantiSMASH from a zip package and ensure dependencies are installed separately. Cloning from GitHub \u2013 Recommended for users who want the latest development version and prefer managing dependencies in a virtual Conda environment.","title":"Installation Options"},{"location":"install/#option-1-downloading-the-standalone-release","text":"Download the latest plantiSMASH standalone release from our GitHub repo: https://github.com/plantismash/plantismash/releases Ensure you have the following dependencies installed (tested versions in parentheses): Glimmer (3.02) GlimmerHMM (3.0.4) HMMER3 (3.3.2) HMMER2 (version 2.3.2 tested). plantiSMASH requires hmmpfam2, a legacy tool from HMMER 2. This binary is no longer included in HMMER 3.x and must be installed manuallyappend a 2 to all hmmer2 executables to avoid conflict with hmmer3 executable names, like hmmalign -> hmmalign2 FastTree (2.1.8) DIAMOND (2.0.15) MUSCLE (3.8.31) Prodigal (2.6.3) NCBI Blast+ (2.12.0) CD-HIT (4.8.1) LibXML2 (2.10.3) pplacer NCBI Datasets CLI (16.40.1) Unzip Helperlibs (0.2.1) Biopython (1.76) Once all dependencies are installed, plantiSMASH should be ready to use.","title":"Option 1: Downloading the standalone release"},{"location":"install/#option-2-cloning-from-github","text":"Using Windows? Click here for the full Windows Setup Guide . Clone the latest version from GitHub: git clone -b dev https://github.com/plantismash/plantismash.git cd plantismash If not installed already, conda/mamba can be installed by following these instructions: # install miniforge curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh # follow instructions and let it run `conda init` # set default channels source ~/.bashrc conda config --set auto_activate_base false source ~/.bashrc conda config --add channels bioconda conda config --add channels conda-forge conda config --set channel_priority strict Create and activate a Conda environment using the provided environment.yml file conda env create -f environment.yml conda activate plantismash Download the required databases: python download_databases.py Verify the installation python run_antismash.py -h","title":"Option 2: Cloning from GitHub"},{"location":"intro/","text":"Introduction # Plants around the globe produce a wide variety of specialized metabolites that play key roles in communication and defense. Recently, evidence has been accumulating that (like in microbes) the genes encoding the biosynthetic pathways towards these metabolites are often densely clustered in specific genomic loci: biosynthetic gene clusters (BGCs). This offers great potential for genome-based discovery of plant natural products. Here, we introduce plantiSMASH, a versatile online analysis platform that automates the identification of putative plant BGCs, as well as their comparative genomic and transcriptomic analysis. The cluster detection logic, validated on a set of all plant BGCs that have been experimentally characterized thus far, is able to pinpoint many complex metabolic loci across the Plant Kingdom. Additionally, interactively visualized coexpression analysis and comparative cluster-cluster alignment allow users to judge multiple sources of evidence for a putative BGC to encode a group of enzymes that truly functions jointly in a biosynthetic pathway. Furthermore, plantiSMASH finds coexpression correlations between putative BGCs and genes elsewhere in the genome. Altogether, this new software provides a comprehensive toolkit for plant geneticists to further explore the nature of gene clustering in plant metabolism. Moreover, spurred by the continuing decrease in costs of plant genome sequencing and assembly, it will soon allow natural product chemists to apply genome mining technologies to the discovery of novel medicinal compounds from a wide range of plant species.","title":"Introduction"},{"location":"intro/#introduction","text":"Plants around the globe produce a wide variety of specialized metabolites that play key roles in communication and defense. Recently, evidence has been accumulating that (like in microbes) the genes encoding the biosynthetic pathways towards these metabolites are often densely clustered in specific genomic loci: biosynthetic gene clusters (BGCs). This offers great potential for genome-based discovery of plant natural products. Here, we introduce plantiSMASH, a versatile online analysis platform that automates the identification of putative plant BGCs, as well as their comparative genomic and transcriptomic analysis. The cluster detection logic, validated on a set of all plant BGCs that have been experimentally characterized thus far, is able to pinpoint many complex metabolic loci across the Plant Kingdom. Additionally, interactively visualized coexpression analysis and comparative cluster-cluster alignment allow users to judge multiple sources of evidence for a putative BGC to encode a group of enzymes that truly functions jointly in a biosynthetic pathway. Furthermore, plantiSMASH finds coexpression correlations between putative BGCs and genes elsewhere in the genome. Altogether, this new software provides a comprehensive toolkit for plant geneticists to further explore the nature of gene clustering in plant metabolism. Moreover, spurred by the continuing decrease in costs of plant genome sequencing and assembly, it will soon allow natural product chemists to apply genome mining technologies to the discovery of novel medicinal compounds from a wide range of plant species.","title":"Introduction"},{"location":"plantismash_full_documentation/","text":"# How to use plantiSMASH See our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY. ... ...","title":"Plantismash full documentation"},{"location":"plantismash_full_documentation/#_1","text":"How to use plantiSMASH See our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY. ... ...","title":""},{"location":"plantismash_how_to_use/","text":"# How to use plantiSMASH See our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY.","title":"Plantismash how to use"},{"location":"plantismash_how_to_use/#_1","text":"How to use plantiSMASH See our Springer's Protocols book chapter: Kautsar, S. A., Duran, H. G. S., & Medema, M. H. (2018). Genomic identification and analysis of specialized metabolite biosynthetic gene clusters in plants using plantiSMASH. In Plant Chemical Genomics (pp. 173-188). Humana Press, New York, NY.","title":""},{"location":"web_service/","text":"Running the plantiSMASH web service # This is the documentation on running the whole plantiSMASH web service setup. If you are just interested in running antiSMASH for yourself, you might not need this. Feel free to skip to the guide on submitting antiSMASH jobs . Recently, we have switched the whole setup to run in docker containers. Make sure you have a reasonably recent install of docker. This guide explains how to run the whole antiSMASH web service stack on a single machine. Larger production setups will be more complicated. Note that it's trivial to wrap this whole setup in a docker-compose file, but I'm running the appropriate commands via the docker CLI for increased flexibility. Overview # There are multiple components involved in running the antiSMASH webservice. Web App # The webapp is what the users interact with in their browsers. It is responsible for starting jobs, displaying the status of running jobs, and showing the results of completed jobs. Provided by the antismash/websmash image. Job Queue # The job queue is taking care of tracking everything concerning jobs. It is run on a Redis server. Provided by the redis image. antiSMASH instances # Individual jobs are run using the antiSMASH main executable. This is wrapped by a job runner that knows how to retrieve new jobs from the job queue, and how to pick the correct parameters depending on the user input. Provided by the antismash/runsmash-lite container. Job Status Monitor # Not shown on the schema, not absolutely required, but really nice to have is the status monitor tool that will make sure the web app can display the latest available status. Also provided by the antismash/runsmash-lite container. Shared setup # The web app, job runners and the status monitor need to have access to a shared directory. In this example, we will provide it on the host. In a more complex multi-host setup, you will want to put this on a shared filesystem. In all the below setups, the shared directory will be called /data/antismash/upload . If you are using a different directory, adjust accordingly. Setting up the job queue # This is straightforward and using the off the shelf redis image available on the docker hub. Run it using docker run --name antismash-redis redis . Setting up the antiSMASH job runner(s) # This step requires more work. First, set up the PFAM and ClusterBlast databases as described for the standalone-lite image . Once the databases are all set up, you can start up a runSMASH executable in the container like so: docker run --name antismash-run01 \\ --volume /data/antismash/upload:/upload:rw \\ --volume /data/databases:/databases:ro \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/runSMASH --queue redis://redis/0 \\ --workdir /upload \\ --statusdir /upload/status \\ --name runner01 \\ --cpus 8 Make sure to adjust the number of --cpus to the number you want to use per job. You can run multiple of these job runners, just make sure you use a different --name both for the docker run and the runSMASH commands. Setting up the antiSMASH job status monitor # This one is easier, just make sure to match the --statusdir to what you used for the runSMASH command if you changed that. Run: docker run --name antismash-watch \\ --volume /data/antismash/upload:/upload:rw \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/watchStatus --queue redis://redis/0 \\ --statusdir /upload/status Setting up the antiSMASH web interface # The web interface needs a file containing some settings. You will have to adjust those according to your local setup. An example settings file looks like this: ############# Configuration ############# DEBUG = False SECRET_KEY = \"replace this by a long random string\" RESULTS_PATH = '/upload' RESULTS_URL = '/upload' # Flask-Mail settings MAIL_SERVER = \"mail\" DEFAULT_MAIL_SENDER = \"antismash@example.org\" DEFAULT_RECIPIENTS = [\"antismash@example.org\"] # Flask-Redis settings REDIS_URL = \"redis://redis/0\" ######################################### Assuming you have saved this file as /data/antismash/websmash/settings.py , you can start the web interface like this: docker run --name antismash-web \\ --volume /data/antismash/upload:/upload \\ --volume /data/antismash/websmash:/config \\ --link antismash-redis:redis \\ --publish 5000:8000 \\ antismash/websmash Now the antiSMASH web interface is available on your local machine at port 5000 , ready to accept and process jobs.","title":"Web service"},{"location":"web_service/#running-the-plantismash-web-service","text":"This is the documentation on running the whole plantiSMASH web service setup. If you are just interested in running antiSMASH for yourself, you might not need this. Feel free to skip to the guide on submitting antiSMASH jobs . Recently, we have switched the whole setup to run in docker containers. Make sure you have a reasonably recent install of docker. This guide explains how to run the whole antiSMASH web service stack on a single machine. Larger production setups will be more complicated. Note that it's trivial to wrap this whole setup in a docker-compose file, but I'm running the appropriate commands via the docker CLI for increased flexibility.","title":"Running the plantiSMASH web service"},{"location":"web_service/#overview","text":"There are multiple components involved in running the antiSMASH webservice.","title":"Overview"},{"location":"web_service/#web-app","text":"The webapp is what the users interact with in their browsers. It is responsible for starting jobs, displaying the status of running jobs, and showing the results of completed jobs. Provided by the antismash/websmash image.","title":"Web App"},{"location":"web_service/#job-queue","text":"The job queue is taking care of tracking everything concerning jobs. It is run on a Redis server. Provided by the redis image.","title":"Job Queue"},{"location":"web_service/#antismash-instances","text":"Individual jobs are run using the antiSMASH main executable. This is wrapped by a job runner that knows how to retrieve new jobs from the job queue, and how to pick the correct parameters depending on the user input. Provided by the antismash/runsmash-lite container.","title":"antiSMASH instances"},{"location":"web_service/#job-status-monitor","text":"Not shown on the schema, not absolutely required, but really nice to have is the status monitor tool that will make sure the web app can display the latest available status. Also provided by the antismash/runsmash-lite container.","title":"Job Status Monitor"},{"location":"web_service/#shared-setup","text":"The web app, job runners and the status monitor need to have access to a shared directory. In this example, we will provide it on the host. In a more complex multi-host setup, you will want to put this on a shared filesystem. In all the below setups, the shared directory will be called /data/antismash/upload . If you are using a different directory, adjust accordingly.","title":"Shared setup"},{"location":"web_service/#setting-up-the-job-queue","text":"This is straightforward and using the off the shelf redis image available on the docker hub. Run it using docker run --name antismash-redis redis .","title":"Setting up the job queue"},{"location":"web_service/#setting-up-the-antismash-job-runners","text":"This step requires more work. First, set up the PFAM and ClusterBlast databases as described for the standalone-lite image . Once the databases are all set up, you can start up a runSMASH executable in the container like so: docker run --name antismash-run01 \\ --volume /data/antismash/upload:/upload:rw \\ --volume /data/databases:/databases:ro \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/runSMASH --queue redis://redis/0 \\ --workdir /upload \\ --statusdir /upload/status \\ --name runner01 \\ --cpus 8 Make sure to adjust the number of --cpus to the number you want to use per job. You can run multiple of these job runners, just make sure you use a different --name both for the docker run and the runSMASH commands.","title":"Setting up the antiSMASH job runner(s)"},{"location":"web_service/#setting-up-the-antismash-job-status-monitor","text":"This one is easier, just make sure to match the --statusdir to what you used for the runSMASH command if you changed that. Run: docker run --name antismash-watch \\ --volume /data/antismash/upload:/upload:rw \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/watchStatus --queue redis://redis/0 \\ --statusdir /upload/status","title":"Setting up the antiSMASH job status monitor"},{"location":"web_service/#setting-up-the-antismash-web-interface","text":"The web interface needs a file containing some settings. You will have to adjust those according to your local setup. An example settings file looks like this: ############# Configuration ############# DEBUG = False SECRET_KEY = \"replace this by a long random string\" RESULTS_PATH = '/upload' RESULTS_URL = '/upload' # Flask-Mail settings MAIL_SERVER = \"mail\" DEFAULT_MAIL_SENDER = \"antismash@example.org\" DEFAULT_RECIPIENTS = [\"antismash@example.org\"] # Flask-Redis settings REDIS_URL = \"redis://redis/0\" ######################################### Assuming you have saved this file as /data/antismash/websmash/settings.py , you can start the web interface like this: docker run --name antismash-web \\ --volume /data/antismash/upload:/upload \\ --volume /data/antismash/websmash:/config \\ --link antismash-redis:redis \\ --publish 5000:8000 \\ antismash/websmash Now the antiSMASH web interface is available on your local machine at port 5000 , ready to accept and process jobs.","title":"Setting up the antiSMASH web interface"},{"location":"website_submission/","text":"Setting up your plantiSMASH job # This page describes all relevant steps to get to interpretable plantiSMASH output using the web server. It covers everything from the correct input data to what all settings and parameters mean. Here is the latest stable bacterial version of plantiSMASH available of which a screenshot is provided below: plantiSMASH database of precalculated results # Before submitting your plantiSMASH job, check if the results for your genome are already available in the precalculated results on the plantiSMASH database . Registering your plantiSMASH job # In case you would like to get an email alert upon completion of your job you can optionally provide your email address in the \"Notification settings\" panel. You will then receive an email with a link to your completed job once it finished okay or if any error would have unfortunately occurred. Please note that if you did not provide an email address, you should bookmark the link to the job submission page, as otherwise you will not be able to access the results anymore. plantiSMASH input data # The ideal input for plantiSMASH is an annotated nucleotide file in Genbank format or EMBL format. You can either upload a GenBank/EMBL file manually, or enter the GenBank/RefSeq accession number of your sequence for plantiSMASH to upload it. Alternatively, you can provide a FASTA file containing one or more sequences. If possible, you should also supply a separate GFF3-formatted file containing the annotation information for all said sequences. If no annotation is available, we recommend running your sequence through an annotation pipeline like MAKER (preferably with transcriptomic evidence) to obtain GBK/EMBL files with high-quality annotations. Otherwise, plantiSMASH will generate a preliminary annotation using GlimmerHMM, and use that to run the rest of the analysis. Input files should be properly formatted. If you are creating your GBK/EMBL/FASTA file manually, be sure to do so in a plain text editor like Notepad or Emacs, and saving your files as \"All files ( . )\", ending with the correct extension (for example \".fasta\", \".gbk\", or \".embl\"). There are several optional analyses that may or may not be run on your sequence. Highly recommended is the ClusterBlast Comparative Analysis, which runs Diamond using each amino acid sequence from a detected gene cluster as a query on a large database of predicted protein sequences from secondary metabolite biosynthetic gene clusters, and pools the results to identify the gene clusters that are most homologous to the gene cluster that was detected in your query nucleotide sequence. In any case, it is very important that input files are properly formatted. If you are creating your GBK/EMBL/FASTA file manually, be sure to do so in a plain text editor like Notepad or Emacs, and saving your files as \"All files ( . )\", ending with the correct extension (for example \".fasta\", \".gbk\", or \".embl\".) Additional analyses and Advanced options # Before pressing the submission button, you will have to indicate which plantiSMASH features you like to run. As can be seen in the screenshot above, all features can be easily toggled off or on in one click on the top of the \"Additional analysis\" panel. The following three features are off by default and are considered to be useful for advanced users or in case interesting biosynthetic gene clusters were found that warrant further detailed analysis. KnownClusterBlast analysis # The identified clusters are searched against the MIBiG repository . MIBiG is a hand curated data collection of biosynthetic gene clusters, which have been experimentally characterized. ClusterBlast analysis # the identified clusters are searched against a comprehensive gene cluster database and similar clusters are identified. The algorithm used here is inspired by MultiGeneBlast . It runs BlastP using each amino acid sequence from a detected gene cluster as a query on a large database of predicted protein sequences from secondary metabolite biosynthetic gene clusters, and pools the results to identify the gene clusters that are most homologous to the gene cluster that was detected in your query nucleotide sequence. Enabling this option will increase the runtime of a submission. Gene expression analysis (CoExpress) # Also available is the analysis of gene coexpression from transcriptomics data. You can supply one or more additional file(s) either in GEO compliant *.soft format or in a simple CSV format; plantiSMASH will then generate several powerful visualizations to help you see how genes interacts in terms of expression in a set conditions, both within and between clusters. This is an example of CSV format accepted by plantiSMASH-CoExpress: The first two lines containing #title and #desc should be self-explanatory. These are then followed by the comma separated rows. The first row would be the header, containing each sample / condition name. The next rows are for the actual expression data, with the first column containing the locus tag directly matching to the supplied genome annotation, and the next columns containing expression values of the gene for each sample /condition. The number of columns in each row should be identical. In case of no expression data for a specific gene in a specific sample, simply put 0 or an empty character in the space between the commas. Also, one important thing to note is that the expression values should be comparable across all samples, i.e. they are measured and normalized in the same way (log values, signal count data, etc). Subgroup identification # plantiSMASH predicts substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases, using pplacer and hmmer. The phylogenetic placement tool pplacer is used to place the target protein sequence on a precomputed reference tree. If the other members under the target parent node belong to the same subgroup, the target is considered to belong to the subgroup. In addition, GraPhlAn (Graphical Phylogenetic Analysis) is used to generate a tree image of the placement result. The HMM of each subgroup used by hmmer scan is made based on the full-length protein sequences of members in the subgroup. HMMs find matches based on the conserved positions of subgroup members, so they are also an efficient and simple method to identify subgroups of targets, especially those sequences with big differences. When the subgroup represented by the HMM with the highest match bitscore is consistent with the results from pplacer, it will be reported on the overview page that the target may have the same substrate type as those members of the subgroup. This module is available from the command line. See Command Line Use . TFBS Detection # These results are displayed within the Pfam domains section of the plantiSMASH HTML results, by emphasising the borders of the relevant domains. This module is available from the command line. See Command Line Use . Results # See Understanding the output for instructions on how to download the results.","title":"Submitting jobs on the webserver"},{"location":"website_submission/#setting-up-your-plantismash-job","text":"This page describes all relevant steps to get to interpretable plantiSMASH output using the web server. It covers everything from the correct input data to what all settings and parameters mean. Here is the latest stable bacterial version of plantiSMASH available of which a screenshot is provided below:","title":"Setting up your plantiSMASH job"},{"location":"website_submission/#plantismash-database-of-precalculated-results","text":"Before submitting your plantiSMASH job, check if the results for your genome are already available in the precalculated results on the plantiSMASH database .","title":"plantiSMASH database of precalculated results"},{"location":"website_submission/#registering-your-plantismash-job","text":"In case you would like to get an email alert upon completion of your job you can optionally provide your email address in the \"Notification settings\" panel. You will then receive an email with a link to your completed job once it finished okay or if any error would have unfortunately occurred. Please note that if you did not provide an email address, you should bookmark the link to the job submission page, as otherwise you will not be able to access the results anymore.","title":"Registering your plantiSMASH job"},{"location":"website_submission/#plantismash-input-data","text":"The ideal input for plantiSMASH is an annotated nucleotide file in Genbank format or EMBL format. You can either upload a GenBank/EMBL file manually, or enter the GenBank/RefSeq accession number of your sequence for plantiSMASH to upload it. Alternatively, you can provide a FASTA file containing one or more sequences. If possible, you should also supply a separate GFF3-formatted file containing the annotation information for all said sequences. If no annotation is available, we recommend running your sequence through an annotation pipeline like MAKER (preferably with transcriptomic evidence) to obtain GBK/EMBL files with high-quality annotations. Otherwise, plantiSMASH will generate a preliminary annotation using GlimmerHMM, and use that to run the rest of the analysis. Input files should be properly formatted. If you are creating your GBK/EMBL/FASTA file manually, be sure to do so in a plain text editor like Notepad or Emacs, and saving your files as \"All files ( . )\", ending with the correct extension (for example \".fasta\", \".gbk\", or \".embl\"). There are several optional analyses that may or may not be run on your sequence. Highly recommended is the ClusterBlast Comparative Analysis, which runs Diamond using each amino acid sequence from a detected gene cluster as a query on a large database of predicted protein sequences from secondary metabolite biosynthetic gene clusters, and pools the results to identify the gene clusters that are most homologous to the gene cluster that was detected in your query nucleotide sequence. In any case, it is very important that input files are properly formatted. If you are creating your GBK/EMBL/FASTA file manually, be sure to do so in a plain text editor like Notepad or Emacs, and saving your files as \"All files ( . )\", ending with the correct extension (for example \".fasta\", \".gbk\", or \".embl\".)","title":"plantiSMASH input data"},{"location":"website_submission/#additional-analyses-and-advanced-options","text":"Before pressing the submission button, you will have to indicate which plantiSMASH features you like to run. As can be seen in the screenshot above, all features can be easily toggled off or on in one click on the top of the \"Additional analysis\" panel. The following three features are off by default and are considered to be useful for advanced users or in case interesting biosynthetic gene clusters were found that warrant further detailed analysis.","title":"Additional analyses and Advanced options"},{"location":"website_submission/#knownclusterblast-analysis","text":"The identified clusters are searched against the MIBiG repository . MIBiG is a hand curated data collection of biosynthetic gene clusters, which have been experimentally characterized.","title":"KnownClusterBlast analysis"},{"location":"website_submission/#clusterblast-analysis","text":"the identified clusters are searched against a comprehensive gene cluster database and similar clusters are identified. The algorithm used here is inspired by MultiGeneBlast . It runs BlastP using each amino acid sequence from a detected gene cluster as a query on a large database of predicted protein sequences from secondary metabolite biosynthetic gene clusters, and pools the results to identify the gene clusters that are most homologous to the gene cluster that was detected in your query nucleotide sequence. Enabling this option will increase the runtime of a submission.","title":"ClusterBlast analysis"},{"location":"website_submission/#gene-expression-analysis-coexpress","text":"Also available is the analysis of gene coexpression from transcriptomics data. You can supply one or more additional file(s) either in GEO compliant *.soft format or in a simple CSV format; plantiSMASH will then generate several powerful visualizations to help you see how genes interacts in terms of expression in a set conditions, both within and between clusters. This is an example of CSV format accepted by plantiSMASH-CoExpress: The first two lines containing #title and #desc should be self-explanatory. These are then followed by the comma separated rows. The first row would be the header, containing each sample / condition name. The next rows are for the actual expression data, with the first column containing the locus tag directly matching to the supplied genome annotation, and the next columns containing expression values of the gene for each sample /condition. The number of columns in each row should be identical. In case of no expression data for a specific gene in a specific sample, simply put 0 or an empty character in the space between the commas. Also, one important thing to note is that the expression values should be comparable across all samples, i.e. they are measured and normalized in the same way (log values, signal count data, etc).","title":"Gene expression analysis (CoExpress)"},{"location":"website_submission/#subgroup-identification","text":"plantiSMASH predicts substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases, using pplacer and hmmer. The phylogenetic placement tool pplacer is used to place the target protein sequence on a precomputed reference tree. If the other members under the target parent node belong to the same subgroup, the target is considered to belong to the subgroup. In addition, GraPhlAn (Graphical Phylogenetic Analysis) is used to generate a tree image of the placement result. The HMM of each subgroup used by hmmer scan is made based on the full-length protein sequences of members in the subgroup. HMMs find matches based on the conserved positions of subgroup members, so they are also an efficient and simple method to identify subgroups of targets, especially those sequences with big differences. When the subgroup represented by the HMM with the highest match bitscore is consistent with the results from pplacer, it will be reported on the overview page that the target may have the same substrate type as those members of the subgroup. This module is available from the command line. See Command Line Use .","title":"Subgroup identification"},{"location":"website_submission/#tfbs-detection","text":"These results are displayed within the Pfam domains section of the plantiSMASH HTML results, by emphasising the borders of the relevant domains. This module is available from the command line. See Command Line Use .","title":"TFBS Detection"},{"location":"website_submission/#results","text":"See Understanding the output for instructions on how to download the results.","title":"Results"},{"location":"windows-linux-setup/","text":"Setting Up plantiSMASH on Windows Without Linux # For users who do not have a Linux system installed, follow this guide to set up a Linux environment on Windows . Create a Linux Environment in Windows # Skip this step if using a Linux server. Refer to the WSL setup guide . Open the Windows command prompt: Press Win Key , search for \u2018command prompt\u2019, and select \u2018Run as administrator\u2019. Click \u2018Yes\u2019 when prompted by Windows to allow the app to make changes. Type in the command prompt: wsl.exe --install Wait for the installation to finish, and type \u2018Yes\u2019 if prompted. Restart your computer. Click on Ubuntu.exe to register Ubuntu. To have root as the administrator every time you start, use: sudo -s If any issues arise, unregister Ubuntu in PowerShell with: wsl --unregister Ubuntu Then click Ubuntu.exe to register Ubuntu again or visit your Linux server terminal.","title":"Windows linux setup"},{"location":"windows-linux-setup/#setting-up-plantismash-on-windows-without-linux","text":"For users who do not have a Linux system installed, follow this guide to set up a Linux environment on Windows .","title":"Setting Up plantiSMASH on Windows Without Linux"},{"location":"windows-linux-setup/#create-a-linux-environment-in-windows","text":"Skip this step if using a Linux server. Refer to the WSL setup guide . Open the Windows command prompt: Press Win Key , search for \u2018command prompt\u2019, and select \u2018Run as administrator\u2019. Click \u2018Yes\u2019 when prompted by Windows to allow the app to make changes. Type in the command prompt: wsl.exe --install Wait for the installation to finish, and type \u2018Yes\u2019 if prompted. Restart your computer. Click on Ubuntu.exe to register Ubuntu. To have root as the administrator every time you start, use: sudo -s If any issues arise, unregister Ubuntu in PowerShell with: wsl --unregister Ubuntu Then click Ubuntu.exe to register Ubuntu again or visit your Linux server terminal.","title":"Create a Linux Environment in Windows"},{"location":"changelog/","text":"Changelog # The changelog contains the version changes of plantiSMASH: plantiSMASH 1.0 plantiSMASH 2.0-beta1 plantiSMASH >=2.0.0","title":"Overview"},{"location":"changelog/#changelog","text":"The changelog contains the version changes of plantiSMASH: plantiSMASH 1.0 plantiSMASH 2.0-beta1 plantiSMASH >=2.0.0","title":"Changelog"},{"location":"changelog/1.0/","text":"Version 1 features # Version 1.0 of plantiSMASH is live now! plantiSMASH is an extension of antiSMASH optimized for plant genomes. Version 1 includes: Specific library of pHMM models and new cluster calling logic Plant-specific ClusterBlast database GlimmerHMM-based gene prediction Homology-based metabolic modeling Coexpression analysis and HTML-based visualization with the CoExpress module Supported Cluster Types (version 1) # Rule Min. Generic Domains* Special Domains Required alkaloid 3 Bet_v_1, Cu_amine_oxid, Str_synth cyclopeptide \u2014 BURP fatty_acid \u2014 \u2014 (not defined in v1) lignan 3 Dirigent phenolamide \u2014 \u2014 (not defined in v1) plant 4 None polyketide 3 Chal_sti_synt_C, Chal_sti_synt_N saccharide 3 Glycos_transf_1, Glycos_transf_2, Glycos_transf_28, UDPGT, UDPGT_2 sesterterpene 2 Terpene_synth_C, polyprenyl_synt strictosidine_like \u2014 \u2014 (not defined in v1) terpene 3 Terpene_synth, Terpene_synth_C, Prenyltrans, SQHop_cyclase_C, SQHop_cyclase_N, PRISE transporter \u2014 \u2014 (not defined in v1) * Generic domains in version 1: cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2","title":"Version 1.0"},{"location":"changelog/1.0/#version-1-features","text":"Version 1.0 of plantiSMASH is live now! plantiSMASH is an extension of antiSMASH optimized for plant genomes. Version 1 includes: Specific library of pHMM models and new cluster calling logic Plant-specific ClusterBlast database GlimmerHMM-based gene prediction Homology-based metabolic modeling Coexpression analysis and HTML-based visualization with the CoExpress module","title":"Version 1 features"},{"location":"changelog/1.0/#supported-cluster-types-version-1","text":"Rule Min. Generic Domains* Special Domains Required alkaloid 3 Bet_v_1, Cu_amine_oxid, Str_synth cyclopeptide \u2014 BURP fatty_acid \u2014 \u2014 (not defined in v1) lignan 3 Dirigent phenolamide \u2014 \u2014 (not defined in v1) plant 4 None polyketide 3 Chal_sti_synt_C, Chal_sti_synt_N saccharide 3 Glycos_transf_1, Glycos_transf_2, Glycos_transf_28, UDPGT, UDPGT_2 sesterterpene 2 Terpene_synth_C, polyprenyl_synt strictosidine_like \u2014 \u2014 (not defined in v1) terpene 3 Terpene_synth, Terpene_synth_C, Prenyltrans, SQHop_cyclase_C, SQHop_cyclase_N, PRISE transporter \u2014 \u2014 (not defined in v1) * Generic domains in version 1: cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2","title":"Supported Cluster Types (version 1)"},{"location":"changelog/2.0.beta1/","text":"New features in 2.0-beta: Expanded detection rules from 6 to 12 Updated ClusterBlast database with 382 NCBI plant genomes Detection of repeats in BURP domains (cyclopeptide BGCs) Substrate prediction for various enzyme subfamilies Supported Cluster Types (version 2.0-beta) # Rule Min. Generic Domains* Special Domains Required alkaloid 3 Bet_v_1, Cu_amine_oxid, Str_synth, BBE, Orn_DAP_Arg_deC, Pyridoxal_deC fatty_acid 3 FA_desaturase, FA_desaturase_2, FA_hydroxylase, CER1-like_C, Transferase, ECH_2, AMP-binding lignan 3 Dirigent MatE 3 MatE phenolamide 2 Transferase, Pyridoxal_deC, Orn_DAP_Arg_deC, Orn_Arg_deC_N plant 4 None polyketide 3 Chal_sti_synt_C, Chal_sti_synt_N, AMP-binding, Thr_dehydrat_C saccharide 3 Glycos_transf_1, Glycos_transf_2, Glycos_transf_28, UDPGT, UDPGT_2, Glyco_hydro_1, Cellulose_synt sesterterpene 2 Terpene_synth_C, polyprenyl_synt strictosidine_like 2 Str_synth, Pyridoxal_deC terpene 3 Terpene_synth, Terpene_synth_C, Prenyltrans, SQHop_cyclase_C, SQHop_cyclase_N, PRISE * Generic domains: Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , Glyco_hydro_1 , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2 Note that sesterpene, strictosidine-like, phenolamide and cyclopeptide also use MatE as a generic domain.","title":"2.0.beta1"},{"location":"changelog/2.0.beta1/#supported-cluster-types-version-20-beta","text":"Rule Min. Generic Domains* Special Domains Required alkaloid 3 Bet_v_1, Cu_amine_oxid, Str_synth, BBE, Orn_DAP_Arg_deC, Pyridoxal_deC fatty_acid 3 FA_desaturase, FA_desaturase_2, FA_hydroxylase, CER1-like_C, Transferase, ECH_2, AMP-binding lignan 3 Dirigent MatE 3 MatE phenolamide 2 Transferase, Pyridoxal_deC, Orn_DAP_Arg_deC, Orn_Arg_deC_N plant 4 None polyketide 3 Chal_sti_synt_C, Chal_sti_synt_N, AMP-binding, Thr_dehydrat_C saccharide 3 Glycos_transf_1, Glycos_transf_2, Glycos_transf_28, UDPGT, UDPGT_2, Glyco_hydro_1, Cellulose_synt sesterterpene 2 Terpene_synth_C, polyprenyl_synt strictosidine_like 2 Str_synth, Pyridoxal_deC terpene 3 Terpene_synth, Terpene_synth_C, Prenyltrans, SQHop_cyclase_C, SQHop_cyclase_N, PRISE * Generic domains: Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , Glyco_hydro_1 , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2 Note that sesterpene, strictosidine-like, phenolamide and cyclopeptide also use MatE as a generic domain.","title":"Supported Cluster Types (version 2.0-beta)"},{"location":"changelog/2.0/","text":"The following changes include all those made between plantiSMASH 1.0 and plantiSMASH 2.0. Important notes # This release increases the minimum python version to 3.9 New features # Major Expanded BGC Detection Rules plantiSMASH version 2 introduces updated and additional biosynthetic gene cluster (BGC) detection rules, significantly expanding the framework\u2019s ability to identify specialized metabolic pathways in plant genomes. These improvements: Broaden the range of detectable cluster types. Increase accuracy in gene grouping and cluster boundary prediction. Enable detection of newly characterized biosynthetic gene families. Detection of repeats in BURP domains (cyclopeptide BGCs). Updated ClusterBlast database with 382 NCBI plant genomes. Substrate Prediction This version adds substrate specificity prediction for selected enzyme families, providing functional insight into the metabolic products of plant BGCs. Features include: Prediction of likely substrates based on sequence motifs and known biochemistry. Integration of substrate information in cluster output and visualizations. Enhanced interpretability of BGC functions and potential products. Regulatory Feature Detection plantiSMASH 2 enhances regulatory analysis by predicting transcription factor binding sites (TFBS) in the promoter regions of BGC-associated genes. This new functionality: Leverages known plant TFBS motif libraries. Identifies putative regulatory elements linked to biosynthetic gene expression. Facilitates hypotheses about coordinated gene regulation within clusters. Supported Cluster Types (version 2) # Rule Min. Generic Domains* Special Domains Required\u00b9 alkaloid 3 At least one of: Bet_v_1 , Cu_amine_oxid , Str_synth , BBE , Orn_DAP_Arg_deC , Pyridoxal_deC fatty_acid 3 At least one of: FA_desaturase , FA_desaturase_2 , FA_hydroxylase , CER1-like_C OR Transferase + ECH_2 OR Transferase + AMP-binding lignan 3 Dirigent (required) phenolamide 2 At least one of: Transferase , Pyridoxal_deC OR Orn_DAP_Arg_deC , Orn_Arg_deC_N plant 4 \u2013 polyketide 3 At least one of: Chal_sti_synt_C , Chal_sti_synt_N OR AMP-binding + Thr_dehydrat_C saccharide 3 At least one of: Glycos_transf_1 , Glycos_transf_2 , Glycos_transf_28 , UDPGT , UDPGT_2 , Glyco_hydro_1 , Cellulose_synt sesterterpene 2 Terpene_synth_C + polyprenyl_synt (both required) strictosidine_like 2 Str_synth + Pyridoxal_deC (both required) terpene 3 At least one of: Terpene_synth , Terpene_synth_C , Prenyltrans , SQHop_cyclase_C , SQHop_cyclase_N , PRISE transporter-associated 3 At least one of: LTP_2 , ABC2_membrane , ABC_tran , MatE * Generic domains: NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , Glyco_hydro_1 , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2 \u00b9 The column \u201cSpecial Domains Required\u201d reflects whether domains are required all together ( AND ) or at least one is sufficient ( OR ). When you see \u201c+\u201d \u2192 all domains are required together ( AND ). When you see \u201cAt least one of\u201d \u2192 any one is sufficient ( OR ). Multiple alternative rules are indicated by lines with \u201cOR\u201d.","title":"Version 2.0"},{"location":"changelog/2.0/#important-notes","text":"This release increases the minimum python version to 3.9","title":"Important notes"},{"location":"changelog/2.0/#new-features","text":"","title":"New features"},{"location":"changelog/2.0/#supported-cluster-types-version-2","text":"Rule Min. Generic Domains* Special Domains Required\u00b9 alkaloid 3 At least one of: Bet_v_1 , Cu_amine_oxid , Str_synth , BBE , Orn_DAP_Arg_deC , Pyridoxal_deC fatty_acid 3 At least one of: FA_desaturase , FA_desaturase_2 , FA_hydroxylase , CER1-like_C OR Transferase + ECH_2 OR Transferase + AMP-binding lignan 3 Dirigent (required) phenolamide 2 At least one of: Transferase , Pyridoxal_deC OR Orn_DAP_Arg_deC , Orn_Arg_deC_N plant 4 \u2013 polyketide 3 At least one of: Chal_sti_synt_C , Chal_sti_synt_N OR AMP-binding + Thr_dehydrat_C saccharide 3 At least one of: Glycos_transf_1 , Glycos_transf_2 , Glycos_transf_28 , UDPGT , UDPGT_2 , Glyco_hydro_1 , Cellulose_synt sesterterpene 2 Terpene_synth_C + polyprenyl_synt (both required) strictosidine_like 2 Str_synth + Pyridoxal_deC (both required) terpene 3 At least one of: Terpene_synth , Terpene_synth_C , Prenyltrans , SQHop_cyclase_C , SQHop_cyclase_N , PRISE transporter-associated 3 At least one of: LTP_2 , ABC2_membrane , ABC_tran , MatE * Generic domains: NAD_binding_4 , FAE1_CUT1_RppA , HAD_RAM2_N , Orn_DAP_Arg_deC , Pyridoxal_deC , BBE , FA_hydroxylase , CER1-like_C , ECH_2 , Oxidored_FMN , 3Beta_HSD , Glyco_hydro_1 , ADH_N , ADH_N_2 , Abhydrolase_3 , Aldo_ket_red , cMT , nMT , oMT , adh_short , Chal_sti_synt_C , Chal_sti_synt_N , COesterase , UDPGT , Glyco_transf_28 , Glycos_transf_1 , Glycos_transf_2 , Lycopene_cycl , NAD_binding_1 , p450 , SQHop_cyclase_C , SQHop_cyclase_N , Prenyltrans , Terpene_synth_C , Terpene_synth , Transferase , Aminotran_1_2 , AMP-binding , DIOX_N , Dirigent , Bet_v_1 , Cu_amine_oxid , Str_synth , Trp_syntA , His_biosynth , adh_short_C2 , Peptidase_S10 , Prenyltransf , Epimerase , 2OG-FeII_Oxy , Aminotran_3 , Methyltransf_2 , Methyltransf_3 , Methyltransf_7 , PRISE , Cellulose_synt , Chalcone , ERG4_ERG24 , FA_desaturase , FA_desaturase_2 , Methyltransf_11 , polyprenyl_synt , SE , SQS_PSY , TPMT , UbiA , Lipoxygenase , Lyase_aromatic , HMGL-like , Chalcone_3 , Chalcone_2 , Acetyltransf_1 , UDPGT_2 , GMC_oxred_N , GMC_oxred_C , Amino_oxidase , DAHP_synth_1 , DAHP_synth_2 \u00b9 The column \u201cSpecial Domains Required\u201d reflects whether domains are required all together ( AND ) or at least one is sufficient ( OR ). When you see \u201c+\u201d \u2192 all domains are required together ( AND ). When you see \u201cAt least one of\u201d \u2192 any one is sufficient ( OR ). Multiple alternative rules are indicated by lines with \u201cOR\u201d.","title":"Supported Cluster Types (version 2)"},{"location":"modules/clusterblast/","text":"ClusterBLAST # If you enabled Gene Cluster Comparative Analysis (ClusterBlast), this panel will display the top ten plant gene clusters from the plantiSMASH ClusterBLAST database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast (Diamond) hits between them. The plantiSMASH ClusterBLAST database is defined with a minimum of 2 domains needed from the BGC rules. Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes. ClusterBLAST database # More information about how to update the clusterBLAST database are available in the plantiSMASH Wiki . Ranking system # Reference areas are sorted first based on an empirical similarity score S\u2009=\u2009h\u2009+\u2009H\u2009+\u2009s\u2009+\u2009S\u2009+\u2009B , in which: - h is the number of query genes with a significant hit - H is the number of core query genes with a significant hit - s is the number of gene pairs with conserved synteny - S is the number of gene pairs with conserved synteny involving a core gene - and B is a core gene bonus If the similarity scores are equal, the hits are subsequently ranked based on the cumulative BlastP bit scores between the gene clusters. Similarity percentage # Similarity in the description, e.g. 87% of genes show similarity , is the percentage of genes within the reference that have a hit to any genes in the query. As gene hits are not required to be 100% identity and query genes may hit multiple reference genes, this total similarity percentage is no guarantee that the region is exactly the same. In the case of KnownClusterBlast, this also means that there is no guarantee that the compound(s) recorded for that MIBiG entry will be produce by the region. Even if 100% of genes have a hit for a reference, it may be less relevant than a lower similarity. Some cluster types, e.g. NRPS clusters, may only need a few aminos changed in gene translations to have a completely different product. In all cases, manual verification is required before assuming that the region produces the same compound as the reference. Example 1: low similarity, good match # Reference area R has 70% of genes showing similarity to the query region Q . All genes with hits are very high identity in their hits, at 95% or higher. The missing genes from R are all at one end of the reference area. These genes are also present in the genome antiSMASH was run on, but are outside Q due to the size of R being exceptionally large. After manually checking these extra genes and seeing that they're similar to the missing genes, it's much, much more likely that the genome matches the reference. Example 2: perfect similarity, poor match # Reference area R has 100% of genes showing similarity to the query region Q . None of the genes have a percentage identity in individual hits greater than 60%. While it is still possible that Q produces the same compound as R , it will depend a great deal on the type of cluster and exactly which parts of the genes are similar. Example 3: high similarity, poor match # Reference area R has very high (but not 100%) similarity, with all but one gene in R having similarity to genes in the query region Q . All of the matching genes have very high identity in their hits. The gene in R that is missing in Q should be in the middle of Q and is a core gene responsible for the scaffold of the compound. While it is still possible that Q produces the same compound as R , due to the functionality being present elsewhere, but it is much less likely.","title":"ClusterBLAST"},{"location":"modules/clusterblast/#clusterblast","text":"If you enabled Gene Cluster Comparative Analysis (ClusterBlast), this panel will display the top ten plant gene clusters from the plantiSMASH ClusterBLAST database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast (Diamond) hits between them. The plantiSMASH ClusterBLAST database is defined with a minimum of 2 domains needed from the BGC rules. Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes.","title":"ClusterBLAST"},{"location":"modules/clusterblast/#clusterblast-database","text":"More information about how to update the clusterBLAST database are available in the plantiSMASH Wiki .","title":"ClusterBLAST database"},{"location":"modules/clusterblast/#ranking-system","text":"Reference areas are sorted first based on an empirical similarity score S\u2009=\u2009h\u2009+\u2009H\u2009+\u2009s\u2009+\u2009S\u2009+\u2009B , in which: - h is the number of query genes with a significant hit - H is the number of core query genes with a significant hit - s is the number of gene pairs with conserved synteny - S is the number of gene pairs with conserved synteny involving a core gene - and B is a core gene bonus If the similarity scores are equal, the hits are subsequently ranked based on the cumulative BlastP bit scores between the gene clusters.","title":"Ranking system"},{"location":"modules/clusterblast/#similarity-percentage","text":"Similarity in the description, e.g. 87% of genes show similarity , is the percentage of genes within the reference that have a hit to any genes in the query. As gene hits are not required to be 100% identity and query genes may hit multiple reference genes, this total similarity percentage is no guarantee that the region is exactly the same. In the case of KnownClusterBlast, this also means that there is no guarantee that the compound(s) recorded for that MIBiG entry will be produce by the region. Even if 100% of genes have a hit for a reference, it may be less relevant than a lower similarity. Some cluster types, e.g. NRPS clusters, may only need a few aminos changed in gene translations to have a completely different product. In all cases, manual verification is required before assuming that the region produces the same compound as the reference.","title":"Similarity percentage"},{"location":"modules/clusterblast/#example-1-low-similarity-good-match","text":"Reference area R has 70% of genes showing similarity to the query region Q . All genes with hits are very high identity in their hits, at 95% or higher. The missing genes from R are all at one end of the reference area. These genes are also present in the genome antiSMASH was run on, but are outside Q due to the size of R being exceptionally large. After manually checking these extra genes and seeing that they're similar to the missing genes, it's much, much more likely that the genome matches the reference.","title":"Example 1: low similarity, good match"},{"location":"modules/clusterblast/#example-2-perfect-similarity-poor-match","text":"Reference area R has 100% of genes showing similarity to the query region Q . None of the genes have a percentage identity in individual hits greater than 60%. While it is still possible that Q produces the same compound as R , it will depend a great deal on the type of cluster and exactly which parts of the genes are similar.","title":"Example 2: perfect similarity, poor match"},{"location":"modules/clusterblast/#example-3-high-similarity-poor-match","text":"Reference area R has very high (but not 100%) similarity, with all but one gene in R having similarity to genes in the query region Q . All of the matching genes have very high identity in their hits. The gene in R that is missing in Q should be in the middle of Q and is a core gene responsible for the scaffold of the compound. While it is still possible that Q produces the same compound as R , due to the functionality being present elsewhere, but it is much less likely.","title":"Example 3: high similarity, poor match"},{"location":"modules/clusterrules/","text":"BGC detection and cluster rules # In its rule-based BGC detection mode, plantiSMASH first runs a set of BGC-related HMM profiles on the input data and then uses manually curated rules to identify the BGCs. The currently used rules can be found at GitHub , and a summary is available here For how to customise the rules see the plantiSMASH Developer Wiki . 1. How do rules find BGCs? # 1.1 Identify domains of proteins # plantiSMASH detects protein domains (HMMs) by running hmmerscan. The HMMs files, cluster_rules.txt , hmmdetails.txt , and filterhmmdetails.txt for plants are in plant . The hmmdetails.txt controls which HMMs will be used (4th column) and the bitscore cutoff (3rd column) to filter hmmerscan results. Usually the bitscore cutoff is -1 equal to no filter. The results are recorded in the output .gbk files. To only show the HMMs with highest bitscore from matches on same proteins sequence range, add them in filterhmmdetails.txt . For example, the same domain range match HMM UDPGT and UDPGT_2 , but the output will only show the one with highest bitscore. Note: Another module by using the command --full-hmmer will use Pfam-A.hmm to identify any kind of domains. But the results only recorded in the output .gbk files and did not used in other module. 1.2. Clustering the neighboring genes with identified domains HMMs matches # This involves the essential and Cutoff of a rule in cluster_rules.txt . A rule is usually formed as follows: Name Rule Cutoff (in kb) Extension (in kb) Product type minimum(3,[required],[core_list]) 5 1 The core_list is a list of HMMs names of domains determining product type, such as Chal _ stic _ synt _ C/Chal _ stic _ synt _ N for the rule polyketide . Here the two HMMs names are joined by / , representing the saved cluster contains at least one of them. If joined by , , the cluster containing both domains will be saved. In required , each HMMs name is joined by , , representing the saved cluster contains at least one of them. The required almost is the list of HMMs record in hmmdetails.txt because the clustering starts from the gene with a HMM (in the list) match. Then check the HMM matches of neighboring genes whether in the required . If a neighboring gene with the match belongs to the required , then add this gene and check the neighbors of it and so on until no new gene adding in the cluster. The span of left and right \u201cneighborhood\u201d of a gene on the conift or on the chromosome is calculated dynamically by function get_dynamic_cutoff_multiplier . Simply, left span = right span = Cutoff*(the span of the nearest ten genes)/10 In idea situation and Cutoff = 5 , the neighboring genes are the nearest ten genes. But if one of the nearest is way far away then it will be in the \u2018neighborhood\u2019. You can increase the cutoff to consider more neighbor genes. When cutoff = 10, then the neighboring genes must include the nearest 10 genes. 1.3. Filter the clusters # The domains composition of the cluster contains at least two different domains ( --min-domain-number 2 is default) and meets core_list . The cluster contains at least three genes with required HMMs matches (set by the number behind minimum( ) and they sharing the similarity below 50% ( --cdh-cutoff 0.5 is default). The similarity is calculated by CD-HIT. Maybe meet the error of memory, the default is --cdh-memory 2000 . 1.4. output # The cluster also contain genes in the Extension of the both ends biosynthetic genes. The cluster type is same to the name of rule found and saved it.","title":"BGC detection"},{"location":"modules/clusterrules/#bgc-detection-and-cluster-rules","text":"In its rule-based BGC detection mode, plantiSMASH first runs a set of BGC-related HMM profiles on the input data and then uses manually curated rules to identify the BGCs. The currently used rules can be found at GitHub , and a summary is available here For how to customise the rules see the plantiSMASH Developer Wiki .","title":"BGC detection and cluster rules"},{"location":"modules/clusterrules/#1-how-do-rules-find-bgcs","text":"","title":"1. How do rules find BGCs?"},{"location":"modules/clusterrules/#11-identify-domains-of-proteins","text":"plantiSMASH detects protein domains (HMMs) by running hmmerscan. The HMMs files, cluster_rules.txt , hmmdetails.txt , and filterhmmdetails.txt for plants are in plant . The hmmdetails.txt controls which HMMs will be used (4th column) and the bitscore cutoff (3rd column) to filter hmmerscan results. Usually the bitscore cutoff is -1 equal to no filter. The results are recorded in the output .gbk files. To only show the HMMs with highest bitscore from matches on same proteins sequence range, add them in filterhmmdetails.txt . For example, the same domain range match HMM UDPGT and UDPGT_2 , but the output will only show the one with highest bitscore. Note: Another module by using the command --full-hmmer will use Pfam-A.hmm to identify any kind of domains. But the results only recorded in the output .gbk files and did not used in other module.","title":"1.1 Identify domains of proteins"},{"location":"modules/clusterrules/#12-clustering-the-neighboring-genes-with-identified-domains-hmms-matches","text":"This involves the essential and Cutoff of a rule in cluster_rules.txt . A rule is usually formed as follows: Name Rule Cutoff (in kb) Extension (in kb) Product type minimum(3,[required],[core_list]) 5 1 The core_list is a list of HMMs names of domains determining product type, such as Chal _ stic _ synt _ C/Chal _ stic _ synt _ N for the rule polyketide . Here the two HMMs names are joined by / , representing the saved cluster contains at least one of them. If joined by , , the cluster containing both domains will be saved. In required , each HMMs name is joined by , , representing the saved cluster contains at least one of them. The required almost is the list of HMMs record in hmmdetails.txt because the clustering starts from the gene with a HMM (in the list) match. Then check the HMM matches of neighboring genes whether in the required . If a neighboring gene with the match belongs to the required , then add this gene and check the neighbors of it and so on until no new gene adding in the cluster. The span of left and right \u201cneighborhood\u201d of a gene on the conift or on the chromosome is calculated dynamically by function get_dynamic_cutoff_multiplier . Simply, left span = right span = Cutoff*(the span of the nearest ten genes)/10 In idea situation and Cutoff = 5 , the neighboring genes are the nearest ten genes. But if one of the nearest is way far away then it will be in the \u2018neighborhood\u2019. You can increase the cutoff to consider more neighbor genes. When cutoff = 10, then the neighboring genes must include the nearest 10 genes.","title":"1.2. Clustering the neighboring genes with identified domains HMMs matches"},{"location":"modules/clusterrules/#13-filter-the-clusters","text":"The domains composition of the cluster contains at least two different domains ( --min-domain-number 2 is default) and meets core_list . The cluster contains at least three genes with required HMMs matches (set by the number behind minimum( ) and they sharing the similarity below 50% ( --cdh-cutoff 0.5 is default). The similarity is calculated by CD-HIT. Maybe meet the error of memory, the default is --cdh-memory 2000 .","title":"1.3. Filter the clusters"},{"location":"modules/clusterrules/#14-output","text":"The cluster also contain genes in the Extension of the both ends biosynthetic genes. The cluster type is same to the name of rule found and saved it.","title":"1.4. output"},{"location":"modules/coexpress/","text":"Coexpression analysis # If coexpression data was provided (through either a .soft or .csv file), this panel will show expression information through both a hierarchically clustered heatmap and a coexpression network (see below). You can choose to show either expression fluctuation (the rate of which expression level of a gene changes between samples), color-coded from white to black; or expression intensity (expression level of a gene related to the sample value distribution), color coded from yellow to red. In the correlation network graph, you can see how genes within the cluster (box-shaped nodes) interact with each other, and with other genes in other clusters (ellipse-shaped nodes with solid edges and the corresponding cluster number inside) or anywhere else on the genome (ellipse-shaped nodes with dashed edges). Additionally, by enabling the coexpression analysis, you will also get a Hiveplot overview of significant cluster-cluster interactions detected in the selected transcriptomics dataset. This can be accessed in the cluster overview screen. Input data # To see the input data of this module check Submitting jobs on the webserver","title":"Coexpress"},{"location":"modules/coexpress/#coexpression-analysis","text":"If coexpression data was provided (through either a .soft or .csv file), this panel will show expression information through both a hierarchically clustered heatmap and a coexpression network (see below). You can choose to show either expression fluctuation (the rate of which expression level of a gene changes between samples), color-coded from white to black; or expression intensity (expression level of a gene related to the sample value distribution), color coded from yellow to red. In the correlation network graph, you can see how genes within the cluster (box-shaped nodes) interact with each other, and with other genes in other clusters (ellipse-shaped nodes with solid edges and the corresponding cluster number inside) or anywhere else on the genome (ellipse-shaped nodes with dashed edges). Additionally, by enabling the coexpression analysis, you will also get a Hiveplot overview of significant cluster-cluster interactions detected in the selected transcriptomics dataset. This can be accessed in the cluster overview screen.","title":"Coexpression analysis"},{"location":"modules/coexpress/#input-data","text":"To see the input data of this module check Submitting jobs on the webserver","title":"Input data"},{"location":"modules/cyclopeptides/","text":"Cyclopeptide BGC detection # This module supports the detection of cyclopeptide BGCs in the presence of a BURP domain and repeat sequences. The Cyclopeptide detection module identifies biosynthetic gene clusters (BGCs) associated with cyclopeptide production in plants. Detection is based on two main criteria: The presence of a BURP domain (a characteristic biosynthetic domain). The presence of internal amino acid repeats within coding sequences, suggesting the existence of cyclopeptide precursor peptides. Once a candidate BGC is identified, the module performs the following steps: Repeat Detection: Using a repeat-finding algorithm, the module scans the coding sequences (CDSs) inside the cluster for repeated amino acid motifs. Pattern Matching: Detected repeats are matched against known cyclopeptide-related patterns where available, or reported as new motifs. Filtering Logic: Only clusters containing both a BURP domain and at least one repeat with appropriate features are retained. Result Summary: For each coding sequence with detected repeats, the module reports: The identified repeat patterns. The number of repeat instances. The location and sequence coverage. A visual highlight of the repeats inside the amino acid sequence. The output includes a detailed view showing the repeat locations, pattern matches, and highlighted sequences. Known Cyclopeptide Motif Detection # This module includes detection of known amino acid repeat motifs that are commonly found in plant cyclopeptides. These motifs are defined using regular expressions to flexibly capture conserved sequence patterns, including tolerated variability. The following known motifs are currently supported: Motif Name Regex Pattern Description Lyciumins QP.{5}W Glutamine\u2013Proline followed by any 5 residues and a Tryptophan. Legumenin QP.{3}Y.W Glutamine\u2013Proline with 3 residues, a Tyrosine, any residue, and a Tryptophan. Bicyclic cyclopeptide alkaloid .{1}L.{1}Y..Y Leucine at position 2, Tyrosines spaced within six residues. DUF2775 core peptide (Pfam: PF10905) VS[AI]Y Conserved Valine\u2013Serine followed by Alanine or Isoleucine, and Tyrosine. DUF2775 leader peptide (Pfam: PF10905) FEPR Short leader motif with Phenylalanine\u2013Glutamate\u2013Proline\u2013Arginine. Cca-like peptide QI.{2}W Glutamine\u2013Isoleucine followed by any two residues and a Tryptophan. Stephanotic acid-like QL.{2}W Glutamine\u2013Leucine followed by any two residues and a Tryptophan. Valine\u2013Tyrosine pattern V.{2}Y Valine followed by any two residues and a Tyrosine. Notes: # These motifs are used to identify known cyclopeptide-related repeats in coding sequences. Only matches within CDS features containing internal repeats are considered. The list of motifs is defined in known_motifs.txt (one regex per line). Customising the module # You can easily extend known_motifs.txt to support additional motifs for other peptide classes.","title":"Cyclopeptide Finder"},{"location":"modules/cyclopeptides/#cyclopeptide-bgc-detection","text":"This module supports the detection of cyclopeptide BGCs in the presence of a BURP domain and repeat sequences. The Cyclopeptide detection module identifies biosynthetic gene clusters (BGCs) associated with cyclopeptide production in plants. Detection is based on two main criteria: The presence of a BURP domain (a characteristic biosynthetic domain). The presence of internal amino acid repeats within coding sequences, suggesting the existence of cyclopeptide precursor peptides. Once a candidate BGC is identified, the module performs the following steps: Repeat Detection: Using a repeat-finding algorithm, the module scans the coding sequences (CDSs) inside the cluster for repeated amino acid motifs. Pattern Matching: Detected repeats are matched against known cyclopeptide-related patterns where available, or reported as new motifs. Filtering Logic: Only clusters containing both a BURP domain and at least one repeat with appropriate features are retained. Result Summary: For each coding sequence with detected repeats, the module reports: The identified repeat patterns. The number of repeat instances. The location and sequence coverage. A visual highlight of the repeats inside the amino acid sequence. The output includes a detailed view showing the repeat locations, pattern matches, and highlighted sequences.","title":"Cyclopeptide BGC detection"},{"location":"modules/cyclopeptides/#known-cyclopeptide-motif-detection","text":"This module includes detection of known amino acid repeat motifs that are commonly found in plant cyclopeptides. These motifs are defined using regular expressions to flexibly capture conserved sequence patterns, including tolerated variability. The following known motifs are currently supported: Motif Name Regex Pattern Description Lyciumins QP.{5}W Glutamine\u2013Proline followed by any 5 residues and a Tryptophan. Legumenin QP.{3}Y.W Glutamine\u2013Proline with 3 residues, a Tyrosine, any residue, and a Tryptophan. Bicyclic cyclopeptide alkaloid .{1}L.{1}Y..Y Leucine at position 2, Tyrosines spaced within six residues. DUF2775 core peptide (Pfam: PF10905) VS[AI]Y Conserved Valine\u2013Serine followed by Alanine or Isoleucine, and Tyrosine. DUF2775 leader peptide (Pfam: PF10905) FEPR Short leader motif with Phenylalanine\u2013Glutamate\u2013Proline\u2013Arginine. Cca-like peptide QI.{2}W Glutamine\u2013Isoleucine followed by any two residues and a Tryptophan. Stephanotic acid-like QL.{2}W Glutamine\u2013Leucine followed by any two residues and a Tryptophan. Valine\u2013Tyrosine pattern V.{2}Y Valine followed by any two residues and a Tyrosine.","title":"Known Cyclopeptide Motif Detection"},{"location":"modules/cyclopeptides/#notes","text":"These motifs are used to identify known cyclopeptide-related repeats in coding sequences. Only matches within CDS features containing internal repeats are considered. The list of motifs is defined in known_motifs.txt (one regex per line).","title":"Notes:"},{"location":"modules/cyclopeptides/#customising-the-module","text":"You can easily extend known_motifs.txt to support additional motifs for other peptide classes.","title":"Customising the module"},{"location":"modules/knownclusterblast/","text":"KnownClusterBLAST # Shows clusters from MIBiG that are similar to the current region","title":"KnownClusterBLAST"},{"location":"modules/knownclusterblast/#knownclusterblast","text":"Shows clusters from MIBiG that are similar to the current region","title":"KnownClusterBLAST"},{"location":"modules/subgroup/","text":"Subgroup detection module # plantiSMASH includes a subgroup identification module that helps predict substrate specificities for enzyme subfamilies in plant biosynthetic gene clusters. Currently, this module supports several key protein families: cellulose synthases, UDP-glucuronosyltransferases (UDPGTs), short-chain dehydrogenases (SDRs), and oxidosqualene cyclases (OSCs). The workflow combines: HMMER to detect domain-containing proteins, pplacer to phylogenetically place these proteins onto precomputed reference trees, and GraPhlAn to generate interactive and color-coded visualizations. How it works Domain detection: The target genome is scanned with profile HMMs to detect relevant domains. Phylogenetic placement: Identified protein sequences are placed onto curated reference trees using pplacer. Subgroup inference: If a target protein's neighboring nodes in the tree belong to a consistent known subgroup, it is inferred to belong to that subgroup. HMM matching: Separately, the full-length protein is scored against subgroup-specific HMMs. If the top-scoring subgroup matches the pplacer result, this is marked as high-confidence. Visualization: Color-coded trees are generated with GraPhlAn to display placements and subgroup contexts. Interpreting results In the cluster overview, when a subgroup is detected for a gene, a clickable label is shown. Clicking on the detected subgroup name will open an interactive phylogenetic tree showing the target protein and its neighbors, colored by subgroup. Subgroup predictions that align with known biosynthetic product types are marked with an asterisk *. If no consistent assignment is possible, or if the HMMER and pplacer results disagree, the module presents both results for user inspection. Supported subgroups in v2.0 # This module enables the subgroup of protein sequences from various families based on the results of hmmer scans using domain pHMMs. The families it covers include the Cellulose synthase (CSLs) family (Chung et al., 2020; Jozwiak et al., 2020), UDP-glucuronosyltransferase (UGTs) family (Louveau & Osbourn, 2019), short-chain dehydrogenases/reductases (SDRs) family (Moummou et al., 2012), and oxidosqualene cyclase (OSCs) family (unpublished work). References for the Subgroup Module # Chung, S. Y., Seki, H., Fujisawa, Y., Shimoda, Y., Hiraga, S., Nomura, Y., Saito, K., Ishimoto, M., & Muranaka, T. (2020). A cellulose synthase-derived enzyme catalyses 3-O-glucuronosylation in saponin biosynthesis. Nature Communications 2020 11:1, 11(1), 1\u201311. https://doi.org/10.1038/s41467-020-19399-0 Jozwiak, A., Sonawane, P. D., Panda, S., Garagounis, C., Papadopoulou, K. K., Abebie, B., Massalha, H., Almekias-Siegl, E., Scherf, T., & Aharoni, A. (2020). Plant terpenoid metabolism co-opts a component of the cell wall biosynthesis machinery. Nature Chemical Biology 2020 16:7, 16(7), 740\u2013748. https://doi.org/10.1038/s41589-020-0541-x Louveau, T., & Osbourn, A. (2019). The Sweet Side of Plant-Specialized Metabolism. Cold Spring Harbor Perspectives in Biology, 11(12), a034744. https://doi.org/10.1101/CSHPERSPECT.A034744 Moummou, H., Kallberg, Y., Tonfack, L. B., Persson, B., & van der Rest, B. (2012). The Plant Short-Chain Dehydrogenase (SDR) superfamily: Genome-wide inventory and diversification patterns. BMC Plant Biology, 12(1), 1\u201317. https://doi.org/10.1186/1471-2229-12-219/FIGURES/7 Customization # This module is modular and can be extended to support additional protein families or custom subgroup definitions. For detailed instructions on how to customize the subgroup analysis (e.g. adding new reference trees or HMMs), please refer to the plantiSMASH Wiki .","title":"Subgroup Finder"},{"location":"modules/subgroup/#subgroup-detection-module","text":"plantiSMASH includes a subgroup identification module that helps predict substrate specificities for enzyme subfamilies in plant biosynthetic gene clusters. Currently, this module supports several key protein families: cellulose synthases, UDP-glucuronosyltransferases (UDPGTs), short-chain dehydrogenases (SDRs), and oxidosqualene cyclases (OSCs). The workflow combines: HMMER to detect domain-containing proteins, pplacer to phylogenetically place these proteins onto precomputed reference trees, and GraPhlAn to generate interactive and color-coded visualizations. How it works Domain detection: The target genome is scanned with profile HMMs to detect relevant domains. Phylogenetic placement: Identified protein sequences are placed onto curated reference trees using pplacer. Subgroup inference: If a target protein's neighboring nodes in the tree belong to a consistent known subgroup, it is inferred to belong to that subgroup. HMM matching: Separately, the full-length protein is scored against subgroup-specific HMMs. If the top-scoring subgroup matches the pplacer result, this is marked as high-confidence. Visualization: Color-coded trees are generated with GraPhlAn to display placements and subgroup contexts. Interpreting results In the cluster overview, when a subgroup is detected for a gene, a clickable label is shown. Clicking on the detected subgroup name will open an interactive phylogenetic tree showing the target protein and its neighbors, colored by subgroup. Subgroup predictions that align with known biosynthetic product types are marked with an asterisk *. If no consistent assignment is possible, or if the HMMER and pplacer results disagree, the module presents both results for user inspection.","title":"Subgroup detection module"},{"location":"modules/subgroup/#supported-subgroups-in-v20","text":"This module enables the subgroup of protein sequences from various families based on the results of hmmer scans using domain pHMMs. The families it covers include the Cellulose synthase (CSLs) family (Chung et al., 2020; Jozwiak et al., 2020), UDP-glucuronosyltransferase (UGTs) family (Louveau & Osbourn, 2019), short-chain dehydrogenases/reductases (SDRs) family (Moummou et al., 2012), and oxidosqualene cyclase (OSCs) family (unpublished work).","title":"Supported subgroups in v2.0"},{"location":"modules/subgroup/#references-for-the-subgroup-module","text":"Chung, S. Y., Seki, H., Fujisawa, Y., Shimoda, Y., Hiraga, S., Nomura, Y., Saito, K., Ishimoto, M., & Muranaka, T. (2020). A cellulose synthase-derived enzyme catalyses 3-O-glucuronosylation in saponin biosynthesis. Nature Communications 2020 11:1, 11(1), 1\u201311. https://doi.org/10.1038/s41467-020-19399-0 Jozwiak, A., Sonawane, P. D., Panda, S., Garagounis, C., Papadopoulou, K. K., Abebie, B., Massalha, H., Almekias-Siegl, E., Scherf, T., & Aharoni, A. (2020). Plant terpenoid metabolism co-opts a component of the cell wall biosynthesis machinery. Nature Chemical Biology 2020 16:7, 16(7), 740\u2013748. https://doi.org/10.1038/s41589-020-0541-x Louveau, T., & Osbourn, A. (2019). The Sweet Side of Plant-Specialized Metabolism. Cold Spring Harbor Perspectives in Biology, 11(12), a034744. https://doi.org/10.1101/CSHPERSPECT.A034744 Moummou, H., Kallberg, Y., Tonfack, L. B., Persson, B., & van der Rest, B. (2012). The Plant Short-Chain Dehydrogenase (SDR) superfamily: Genome-wide inventory and diversification patterns. BMC Plant Biology, 12(1), 1\u201317. https://doi.org/10.1186/1471-2229-12-219/FIGURES/7","title":"References for the Subgroup Module"},{"location":"modules/subgroup/#customization","text":"This module is modular and can be extended to support additional protein families or custom subgroup definitions. For detailed instructions on how to customize the subgroup analysis (e.g. adding new reference trees or HMMs), please refer to the plantiSMASH Wiki .","title":"Customization"},{"location":"modules/tfbs/","text":"Transcription Factor Binding Site (TFBS) Prediction - TFBS Finder module # This module predicts Transcription Factor Binding Sites (TFBSs) around genes and displays the results inside plantiSMASH cluster pages. It uses curated motif matrices (from PlantTFDB) and the MOODS scanner for fast, strand-aware motif search on DNA. Method overview # Motif library A JSON file provides a set of TFBS profiles (one per TF) as 4\u00d7N matrices (A,C,G,T by position) and metadata (name, species, PlantTFDB link, consensus, min/max score). Where we scan For each CDS in the contig, a promoter window is defined relative to its transcription start site (TSS) (approximated by the CDS start): + strand CDS: TSS = CDS.start \u2192 scanned region: [TSS \u2212 W, TSS + 50] \u2212 strand CDS: TSS = CDS.end \u2212 1 \u2192 scanned region: [TSS \u2212 50, TSS + W] This captures the upstream promoter region and includes up to 50 bp downstream of the TSS to account for potential regulatory motifs within the 5\u2032 untranslated region (5\u2032 UTR). Within cluster pages, only CDS whose coordinates overlap the cluster are reported. How we scan Each window is scanned on both strands with MOODS using a motif-specific score threshold derived from a user-supplied p-value . Background nucleotide frequencies are estimated from the scanned window and assumed symmetric (A=T and C=G). Hit filtering and reporting MOODS returns all hits scoring above the per-motif threshold. Hits are then: collected per CDS window, reported with position, strand, distance to TSS, score, aggregated per CDS (unique motif names and hit counts). MOODS-based scanning # We rely on MOODS for exact, high-performance scanning: Matrix type: the module accepts PFMs or log-odds matrices. If any value is negative, the matrix is treated as log-odds ; otherwise it is treated as a PFM and converted to log-odds with MOODS, using the window\u2019s background distribution and a small pseudocount. Thresholds from p-value: for each motif, MOODS computes a score threshold thr such that random hits exceed thr with probability p under the background model. Strands: both forward and reverse-complement strands are scanned. Reverse hits are reported in forward coordinates . Confidence labels (Weak / Medium / Strong) # Each hit is labeled by comparing its score to per-motif min/max score statistics from the JSON: Weak: score \u2264 min_score Strong: score \u2265 (min_score + max_score)/2 Medium: otherwise These labels are not the p-value; they bucket scores relative to each motif\u2019s observed score range. If you curate min_score / max_score , labels will track your expectations. Input matrix format (JSON) # The file contains a top-level dictionary keyed by motif/TF name: { \"AT1G28300\": { \"name\": \"AT1G28300\", \"description\": \"Unknown transcription factor\", \"species\": \"Arabidopsis thaliana\", \"link\": \"https://planttfdb.gao-lab.org/tf.php?sp=Ath&did=AT1G28300.1\", \"consensus\": \"ATGCATGC\", \"max_score\": 7.6068, \"min_score\": 0.0214, \"pwm\": [ [0.661184, 0.002475, ...], // A row, length = motif length [0.332237, 0.002475, ...], // C row [0.003289, 0.002475, ...], // G row [0.003289, 0.992574, ...] // T row ] } } Notes - pwm can be PFM (non-negative, typically columns sum to ~1) or log-odds (can contain negatives). The module auto-detects. - min_score and max_score are used only for confidence labels. - link is shown in the HTML output (motif names become links). Legacy http://planttfdb.cbi.pku.edu.cn/... links are automatically mapped to https://planttfdb.gao-lab.org/.... Parameters & CLI usage # Enable TFBS scanning and control sensitivity from the plantiSMASH CLI: python run_antismash.py \\ --tfbs-detection \\ --tfbs-pvalue 1e-4 \\ --tfbs-range 500 \\ --taxon plants \\ --outputfolder results/my_run \\ my_sequences.gbff Arguments --tfbs-detection Turn on the TFBS module. --tfbs-pvalue FLOAT Per-motif p-value used by MOODS to derive scan thresholds (e.g., 1e-4). --tfbs-range INT Half-window size (bp) around each CDS TSS to scan (e.g., 500 scans [TSS\u2212500, TSS+500]). Example in this documentation The A. thaliana results shown here were generated with p = 0.0001 and \u00b1500 bp. Output # This module adds a \u201cTranscription factor binding sites (\u00b1W bp)\u201d panel to each cluster page with two data tables: Motifs per CDS (aggregated) Summarizes which motifs occur within the window around each CDS TSS. CDS: gene label (from locus_tag , gene , or protein_id ) CDS strand: orientation of the gene (+/\u2212) TSS: coordinate used as transcription start site (TSS) Window: displayed portion of the scanned interval (clipped to cluster bounds) Motifs: unique TF motif names found in the window #Hits: total number of motif matches across those motifs TFBS hits per CDS (within \u00b1window) Full list of individual hits that pass the MOODS threshold. CDS / CDS strand / TSS / Window: as above Motif: clickable motif name that links to the corresponding PlantTFDB TF page Hit start: genomic start (forward axis) of the match Hit strand: strand of the match (+/\u2212) Distance to TSS: signed distance (negative = upstream, positive = downstream) Score: MOODS match score along with the motif\u2019s max_score (for context) Confidence: Weak / Medium / Strong (label derived from per-motif min/threshold/max; see \u201cConfidence labels\u201d) Example settings for the screenshots in this documentation Species: A. thaliana \u2014 p-value = 0.0001 , scan window = \u00b1500 bp around each CDS TSS. Hits are linked to PlantTFDB Customization # Use your own motif library # You can run the TFBS Finder with any set of motifs as long as they follow the expected JSON format (4\u00d7N A/C/G/T rows per motif plus metadata). Create a JSON file in the same format as the bundled library (see \u201cInput matrix format\u201d above). Place the file in antismash/generic_modules/tfbs_finder/data/ . Point the module to it by updating the path in: # antismash/generic_modules/tfbs_finder/tfbs_detection.py PWM_PATH = utils.get_full_path(__file__, os.path.join(\"data\", \"MY_MOTIFS.json\")) Tips # If your matrices are PFMs (non-negative, columns \u2248 sum to 1), the module will convert them to log-odds using MOODS and the local background of each scanned window. If your matrices are already log-odds (may include negatives), they\u2019ll be used as-is. The confidence labels (Weak/Medium/Strong) depend on the min_score and max_score values you provide per motif; adjust them to suit your library. Known limitations # Confidence labels are heuristic and rely on the min_score/max_score ranges supplied in the JSON. If your PFMs are transformed to log-odds, you may wish to re-estimate these bounds for clearer labeling. The motif library path is configured in code (PWM_PATH). If you need to switch libraries at runtime, consider adding a small CLI option to pass a custom JSON path.","title":"TFBS Finder"},{"location":"modules/tfbs/#transcription-factor-binding-site-tfbs-prediction-tfbs-finder-module","text":"This module predicts Transcription Factor Binding Sites (TFBSs) around genes and displays the results inside plantiSMASH cluster pages. It uses curated motif matrices (from PlantTFDB) and the MOODS scanner for fast, strand-aware motif search on DNA.","title":"Transcription Factor Binding Site (TFBS) Prediction - TFBS Finder module"},{"location":"modules/tfbs/#method-overview","text":"Motif library A JSON file provides a set of TFBS profiles (one per TF) as 4\u00d7N matrices (A,C,G,T by position) and metadata (name, species, PlantTFDB link, consensus, min/max score). Where we scan For each CDS in the contig, a promoter window is defined relative to its transcription start site (TSS) (approximated by the CDS start): + strand CDS: TSS = CDS.start \u2192 scanned region: [TSS \u2212 W, TSS + 50] \u2212 strand CDS: TSS = CDS.end \u2212 1 \u2192 scanned region: [TSS \u2212 50, TSS + W] This captures the upstream promoter region and includes up to 50 bp downstream of the TSS to account for potential regulatory motifs within the 5\u2032 untranslated region (5\u2032 UTR). Within cluster pages, only CDS whose coordinates overlap the cluster are reported. How we scan Each window is scanned on both strands with MOODS using a motif-specific score threshold derived from a user-supplied p-value . Background nucleotide frequencies are estimated from the scanned window and assumed symmetric (A=T and C=G). Hit filtering and reporting MOODS returns all hits scoring above the per-motif threshold. Hits are then: collected per CDS window, reported with position, strand, distance to TSS, score, aggregated per CDS (unique motif names and hit counts).","title":"Method overview"},{"location":"modules/tfbs/#moods-based-scanning","text":"We rely on MOODS for exact, high-performance scanning: Matrix type: the module accepts PFMs or log-odds matrices. If any value is negative, the matrix is treated as log-odds ; otherwise it is treated as a PFM and converted to log-odds with MOODS, using the window\u2019s background distribution and a small pseudocount. Thresholds from p-value: for each motif, MOODS computes a score threshold thr such that random hits exceed thr with probability p under the background model. Strands: both forward and reverse-complement strands are scanned. Reverse hits are reported in forward coordinates .","title":"MOODS-based scanning"},{"location":"modules/tfbs/#confidence-labels-weak-medium-strong","text":"Each hit is labeled by comparing its score to per-motif min/max score statistics from the JSON: Weak: score \u2264 min_score Strong: score \u2265 (min_score + max_score)/2 Medium: otherwise These labels are not the p-value; they bucket scores relative to each motif\u2019s observed score range. If you curate min_score / max_score , labels will track your expectations.","title":"Confidence labels (Weak / Medium / Strong)"},{"location":"modules/tfbs/#input-matrix-format-json","text":"The file contains a top-level dictionary keyed by motif/TF name: { \"AT1G28300\": { \"name\": \"AT1G28300\", \"description\": \"Unknown transcription factor\", \"species\": \"Arabidopsis thaliana\", \"link\": \"https://planttfdb.gao-lab.org/tf.php?sp=Ath&did=AT1G28300.1\", \"consensus\": \"ATGCATGC\", \"max_score\": 7.6068, \"min_score\": 0.0214, \"pwm\": [ [0.661184, 0.002475, ...], // A row, length = motif length [0.332237, 0.002475, ...], // C row [0.003289, 0.002475, ...], // G row [0.003289, 0.992574, ...] // T row ] } } Notes - pwm can be PFM (non-negative, typically columns sum to ~1) or log-odds (can contain negatives). The module auto-detects. - min_score and max_score are used only for confidence labels. - link is shown in the HTML output (motif names become links). Legacy http://planttfdb.cbi.pku.edu.cn/... links are automatically mapped to https://planttfdb.gao-lab.org/....","title":"Input matrix format (JSON)"},{"location":"modules/tfbs/#parameters-cli-usage","text":"Enable TFBS scanning and control sensitivity from the plantiSMASH CLI: python run_antismash.py \\ --tfbs-detection \\ --tfbs-pvalue 1e-4 \\ --tfbs-range 500 \\ --taxon plants \\ --outputfolder results/my_run \\ my_sequences.gbff Arguments --tfbs-detection Turn on the TFBS module. --tfbs-pvalue FLOAT Per-motif p-value used by MOODS to derive scan thresholds (e.g., 1e-4). --tfbs-range INT Half-window size (bp) around each CDS TSS to scan (e.g., 500 scans [TSS\u2212500, TSS+500]). Example in this documentation The A. thaliana results shown here were generated with p = 0.0001 and \u00b1500 bp.","title":"Parameters &amp; CLI usage"},{"location":"modules/tfbs/#output","text":"This module adds a \u201cTranscription factor binding sites (\u00b1W bp)\u201d panel to each cluster page with two data tables: Motifs per CDS (aggregated) Summarizes which motifs occur within the window around each CDS TSS. CDS: gene label (from locus_tag , gene , or protein_id ) CDS strand: orientation of the gene (+/\u2212) TSS: coordinate used as transcription start site (TSS) Window: displayed portion of the scanned interval (clipped to cluster bounds) Motifs: unique TF motif names found in the window #Hits: total number of motif matches across those motifs TFBS hits per CDS (within \u00b1window) Full list of individual hits that pass the MOODS threshold. CDS / CDS strand / TSS / Window: as above Motif: clickable motif name that links to the corresponding PlantTFDB TF page Hit start: genomic start (forward axis) of the match Hit strand: strand of the match (+/\u2212) Distance to TSS: signed distance (negative = upstream, positive = downstream) Score: MOODS match score along with the motif\u2019s max_score (for context) Confidence: Weak / Medium / Strong (label derived from per-motif min/threshold/max; see \u201cConfidence labels\u201d) Example settings for the screenshots in this documentation Species: A. thaliana \u2014 p-value = 0.0001 , scan window = \u00b1500 bp around each CDS TSS. Hits are linked to PlantTFDB","title":"Output"},{"location":"modules/tfbs/#customization","text":"","title":"Customization"},{"location":"modules/tfbs/#use-your-own-motif-library","text":"You can run the TFBS Finder with any set of motifs as long as they follow the expected JSON format (4\u00d7N A/C/G/T rows per motif plus metadata). Create a JSON file in the same format as the bundled library (see \u201cInput matrix format\u201d above). Place the file in antismash/generic_modules/tfbs_finder/data/ . Point the module to it by updating the path in: # antismash/generic_modules/tfbs_finder/tfbs_detection.py PWM_PATH = utils.get_full_path(__file__, os.path.join(\"data\", \"MY_MOTIFS.json\"))","title":"Use your own motif library"},{"location":"modules/tfbs/#tips","text":"If your matrices are PFMs (non-negative, columns \u2248 sum to 1), the module will convert them to log-odds using MOODS and the local background of each scanned window. If your matrices are already log-odds (may include negatives), they\u2019ll be used as-is. The confidence labels (Weak/Medium/Strong) depend on the min_score and max_score values you provide per motif; adjust them to suit your library.","title":"Tips"},{"location":"modules/tfbs/#known-limitations","text":"Confidence labels are heuristic and rely on the min_score/max_score ranges supplied in the JSON. If your PFMs are transformed to log-odds, you may wish to re-estimate these bounds for clearer labeling. The motif library path is configured in code (PWM_PATH). If you need to switch libraries at runtime, consider adding a small CLI option to pass a custom JSON path.","title":"Known limitations"},{"location":"understanding_output/","text":"Understanding plantiSMASH Output # The overview page contains a description of the plantiSMASH output and putative BGCs.","title":"Understanding plantiSMASH Output"},{"location":"understanding_output/#understanding-plantismash-output","text":"The overview page contains a description of the plantiSMASH output and putative BGCs.","title":"Understanding plantiSMASH Output"},{"location":"understanding_output/database/","text":"plantiSMASH database # The plantiSMASH database contains a set of precalculated results for selected species. These are updated every plantiSMASH version. See the Changelog section. See the overview of results for plantiSMASH 2.0 database View the PDF . The full overview of the results is availbe on the webserver at plantiSMASH 2.0 database . This directory contains precalculated plantiSMASH database accessible at: \ud83d\udd17 https://plantismash.bioinformatics.nl/precalc/v2 \ud83d\udcc1 Directory Structure # precalc/ \u251c\u2500\u2500 v1/ \u251c\u2500\u2500 v2-beta1/ \u251c\u2500\u2500 v2-beta4/ \u2514\u2500\u2500 v2/ Details on plantiSMASH database versioning and status # Precalc Folder plantiSMASH version used to generate the output clusterBLAST Database used Public Release Date Nr. of genomes Notes Status (Public or Archived) v1/ 1.0 clusterBLAST database hosted on GitHub plantiSMASH 1.0 release https://github.com/plantismash/plantismash/releases/tag/1.0 DATE 49 Coexpress module results available in Arabidopsis thaliana https://plantismash.bioinformatics.nl/precalc/v1/Arabidopsis_thaliana/ Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v1 v2-beta1/ 2.0 beta 1 clusterBLAST available at 10.5281/zenodo.16927685 DATE 387 NOTES Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2-beta1 v2-beta4/ 2.0 beta 4 clusterBLAST available at 10.5281/zenodo.17178066 DATE 387 NOTES Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2-beta4 v2/ 2.0 clusterBLAST available at 10.5281/zenodo.17396002 Public stable release 430 TFBS module results available in Arabidopsis thaliana for 1*10-4 p-value and 500 bp window scanning size. Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2 \u2699\ufe0f Usage # When running plantiSMASH locally, you can specify the ClusterBlast database path with the corresponding version you wish to reproduce: run_antismash.py input.gbk --clusterblast --clusterblast-database /path/to/precalc/clusterblastdb/ \ud83d\udcc4 License and Citation # See How to cite plantiSMASH .","title":"plantiSMASH database"},{"location":"understanding_output/database/#plantismash-database","text":"The plantiSMASH database contains a set of precalculated results for selected species. These are updated every plantiSMASH version. See the Changelog section. See the overview of results for plantiSMASH 2.0 database View the PDF . The full overview of the results is availbe on the webserver at plantiSMASH 2.0 database . This directory contains precalculated plantiSMASH database accessible at: \ud83d\udd17 https://plantismash.bioinformatics.nl/precalc/v2","title":"plantiSMASH database"},{"location":"understanding_output/database/#directory-structure","text":"precalc/ \u251c\u2500\u2500 v1/ \u251c\u2500\u2500 v2-beta1/ \u251c\u2500\u2500 v2-beta4/ \u2514\u2500\u2500 v2/","title":"\ud83d\udcc1 Directory Structure"},{"location":"understanding_output/database/#details-on-plantismash-database-versioning-and-status","text":"Precalc Folder plantiSMASH version used to generate the output clusterBLAST Database used Public Release Date Nr. of genomes Notes Status (Public or Archived) v1/ 1.0 clusterBLAST database hosted on GitHub plantiSMASH 1.0 release https://github.com/plantismash/plantismash/releases/tag/1.0 DATE 49 Coexpress module results available in Arabidopsis thaliana https://plantismash.bioinformatics.nl/precalc/v1/Arabidopsis_thaliana/ Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v1 v2-beta1/ 2.0 beta 1 clusterBLAST available at 10.5281/zenodo.16927685 DATE 387 NOTES Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2-beta1 v2-beta4/ 2.0 beta 4 clusterBLAST available at 10.5281/zenodo.17178066 DATE 387 NOTES Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2-beta4 v2/ 2.0 clusterBLAST available at 10.5281/zenodo.17396002 Public stable release 430 TFBS module results available in Arabidopsis thaliana for 1*10-4 p-value and 500 bp window scanning size. Public in the plantiSMASH database https://plantismash.bioinformatics.nl/precalc/v2","title":"Details on plantiSMASH database versioning and status"},{"location":"understanding_output/database/#usage","text":"When running plantiSMASH locally, you can specify the ClusterBlast database path with the corresponding version you wish to reproduce: run_antismash.py input.gbk --clusterblast --clusterblast-database /path/to/precalc/clusterblastdb/","title":"\u2699\ufe0f Usage"},{"location":"understanding_output/database/#license-and-citation","text":"See How to cite plantiSMASH .","title":"\ud83d\udcc4 License and Citation"},{"location":"understanding_output/overview/","text":"Results overview page # The output of the plantiSMASH analysis pipeline is organized in an interactive HTML page with SVG graphics. Different parts of the analysis are displayed in different panels for every gene cluster. See the example output from Arabidopsis thaliana or other species in the precalculated results page . Initially, a list of identified clusters is displayed in the results page. A gene cluster can be selected for viewing by clicking its number (gene clusters are numbered in the order in which they appear on the input nucleotide sequence) in the \"Select Gene Cluster\" panel just below the top banner or by clicking on the colored \"Cluster XX\" boxes. A click on \"Overview\" brings you back to the overview list. Gene cluster buttons are color-coded by predicted secondary metabolite type. In the upper panel, Gene cluster description , information is given about each gene cluster that was detected. In the upper line, the biosynthetic type and location of the gene cluster are displayed. Underneath this title line, all genes present in a detected gene cluster are outlined. Clicking the Overview button will bring you back to the overview of predicted clusters. At the top left of the page is the plantiSMASH Version information.Direct comparisons between plantiSMASH results should use the same version for consistency, as results can change between versions. Hovering over a gene with the mouse will prompt the gene name to be displayed above the gene. Clicking the gene will provide more information on the gene: its annotation, its sequence similarity with other genes in the cluster, its location, and cross-links specific to that gene. The last two columns containing comparisons to the MiBIG database will only be shown if antiSMASH was run with the KnownClusterBlast option. Genes are color-coded by their assigned enzymatic protein domain profile, which will be listed in the Legend . Additionally, genes will also be categorized by its predicted function, which will be displayed as different color borders. ClusterBLAST # If you enabled Gene Cluster Comparative Analysis (ClusterBlast), this panel will display the top ten plant gene clusters from the plantiSMASH ClusterBLAST database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast (Diamond) hits between them. The plantiSMASH ClusterBLAST database is defined with a minimum of 2 domains needed from the BGC rules. Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes. For more information about the module see ClusterBLAST module KnownClusterBLAST # Shows clusters from MIBiG that are similar to the current region Coexpression analysis # If coexpression data was provided (through either a .soft or .csv file), this panel will show expression information through both a hierarchically clustered heatmap and a coexpression network (see below). You can choose to show either expression fluctuation (the rate of which expression level of a gene changes between samples), color-coded from white to black; or expression intensity (expression level of a gene related to the sample value distribution), color coded from yellow to red. In the correlation network graph, you can see how genes within the cluster (box-shaped nodes) interact with each other, and with other genes in other clusters (ellipse-shaped nodes with solid edges and the corresponding cluster number inside) or anywhere else on the genome (ellipse-shaped nodes with dashed edges). Additionally, by enabling the coexpression analysis, you will also get a Hiveplot overview of significant cluster-cluster interactions detected in the selected transcriptomics dataset. This can be accessed in the cluster overview screen. Subgroup identification module # plantiSMASH predicts substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases, using pplacer and hmmer. The phylogenetic placement tool pplacer is used to place the target protein sequence on a precomputed reference tree. If the other members under the target parent node belong to the same subgroup, the target is considered to belong to the subgroup. In addition, GraPhlAn (Graphical Phylogenetic Analysis) is used to generate a tree image of the placement result. The HMM of each subgroup used by hmmer scan is made based on the full-length protein sequences of members in the subgroup. HMMs find matches based on the conserved positions of subgroup members, so they are also an efficient and simple method to identify subgroups of targets, especially those sequences with big differences. When the subgroup represented by the HMM with the highest match bitscore is consistent with the results from pplacer, it will be reported on the overview page that the target may have the same substrate type as those members of the subgroup. If it belongs to the product type that is predicted by the existence of core enzymes, it is specifically marked with * . For situations where the results of these two tools are inconsistent, or the target is not placed in a subgroup, users need to make their judgment based on results shown on the webpage of each cluster. Downloading the results # At the top right of the page are ancillary links that may be useful. Download allows you to download various parts of the results. About links to information about plantiSMASH. Help links to these documentation pages. Finally, Contact links to a page with a form to send feedback or questions to the plantiSMASH developers. The downward-pointing arrow will open a menu offering to download the complete set of results from the antiSMASH run, a summary Excel file and to the summary EMBL/GenBank output file. The EMBL/GenBank file can be viewed in a genome browser such as Artemis . Results on the public webserver are only kept for ONE month and will be deleted afterwards. It is highly recommended that you download the full result set before they expire.","title":"Results page"},{"location":"understanding_output/overview/#results-overview-page","text":"The output of the plantiSMASH analysis pipeline is organized in an interactive HTML page with SVG graphics. Different parts of the analysis are displayed in different panels for every gene cluster. See the example output from Arabidopsis thaliana or other species in the precalculated results page . Initially, a list of identified clusters is displayed in the results page. A gene cluster can be selected for viewing by clicking its number (gene clusters are numbered in the order in which they appear on the input nucleotide sequence) in the \"Select Gene Cluster\" panel just below the top banner or by clicking on the colored \"Cluster XX\" boxes. A click on \"Overview\" brings you back to the overview list. Gene cluster buttons are color-coded by predicted secondary metabolite type. In the upper panel, Gene cluster description , information is given about each gene cluster that was detected. In the upper line, the biosynthetic type and location of the gene cluster are displayed. Underneath this title line, all genes present in a detected gene cluster are outlined. Clicking the Overview button will bring you back to the overview of predicted clusters. At the top left of the page is the plantiSMASH Version information.Direct comparisons between plantiSMASH results should use the same version for consistency, as results can change between versions. Hovering over a gene with the mouse will prompt the gene name to be displayed above the gene. Clicking the gene will provide more information on the gene: its annotation, its sequence similarity with other genes in the cluster, its location, and cross-links specific to that gene. The last two columns containing comparisons to the MiBIG database will only be shown if antiSMASH was run with the KnownClusterBlast option. Genes are color-coded by their assigned enzymatic protein domain profile, which will be listed in the Legend . Additionally, genes will also be categorized by its predicted function, which will be displayed as different color borders.","title":"Results overview page"},{"location":"understanding_output/overview/#clusterblast","text":"If you enabled Gene Cluster Comparative Analysis (ClusterBlast), this panel will display the top ten plant gene clusters from the plantiSMASH ClusterBLAST database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast (Diamond) hits between them. The plantiSMASH ClusterBLAST database is defined with a minimum of 2 domains needed from the BGC rules. Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes. For more information about the module see ClusterBLAST module","title":"ClusterBLAST"},{"location":"understanding_output/overview/#knownclusterblast","text":"Shows clusters from MIBiG that are similar to the current region","title":"KnownClusterBLAST"},{"location":"understanding_output/overview/#coexpression-analysis","text":"If coexpression data was provided (through either a .soft or .csv file), this panel will show expression information through both a hierarchically clustered heatmap and a coexpression network (see below). You can choose to show either expression fluctuation (the rate of which expression level of a gene changes between samples), color-coded from white to black; or expression intensity (expression level of a gene related to the sample value distribution), color coded from yellow to red. In the correlation network graph, you can see how genes within the cluster (box-shaped nodes) interact with each other, and with other genes in other clusters (ellipse-shaped nodes with solid edges and the corresponding cluster number inside) or anywhere else on the genome (ellipse-shaped nodes with dashed edges). Additionally, by enabling the coexpression analysis, you will also get a Hiveplot overview of significant cluster-cluster interactions detected in the selected transcriptomics dataset. This can be accessed in the cluster overview screen.","title":"Coexpression analysis"},{"location":"understanding_output/overview/#subgroup-identification-module","text":"plantiSMASH predicts substrate specificities of enzyme subfamilies for cellulose synthases, UDP-glucuronosyltransferases, short-chain dehydrogenases, and oxidosqualene cyclases, using pplacer and hmmer. The phylogenetic placement tool pplacer is used to place the target protein sequence on a precomputed reference tree. If the other members under the target parent node belong to the same subgroup, the target is considered to belong to the subgroup. In addition, GraPhlAn (Graphical Phylogenetic Analysis) is used to generate a tree image of the placement result. The HMM of each subgroup used by hmmer scan is made based on the full-length protein sequences of members in the subgroup. HMMs find matches based on the conserved positions of subgroup members, so they are also an efficient and simple method to identify subgroups of targets, especially those sequences with big differences. When the subgroup represented by the HMM with the highest match bitscore is consistent with the results from pplacer, it will be reported on the overview page that the target may have the same substrate type as those members of the subgroup. If it belongs to the product type that is predicted by the existence of core enzymes, it is specifically marked with * . For situations where the results of these two tools are inconsistent, or the target is not placed in a subgroup, users need to make their judgment based on results shown on the webpage of each cluster.","title":"Subgroup identification module"},{"location":"understanding_output/overview/#downloading-the-results","text":"At the top right of the page are ancillary links that may be useful. Download allows you to download various parts of the results. About links to information about plantiSMASH. Help links to these documentation pages. Finally, Contact links to a page with a form to send feedback or questions to the plantiSMASH developers. The downward-pointing arrow will open a menu offering to download the complete set of results from the antiSMASH run, a summary Excel file and to the summary EMBL/GenBank output file. The EMBL/GenBank file can be viewed in a genome browser such as Artemis . Results on the public webserver are only kept for ONE month and will be deleted afterwards. It is highly recommended that you download the full result set before they expire.","title":"Downloading the results"}]}