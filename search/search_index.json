{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"plantiSMASH Documentation # Welcome to the documentation of plantiSMASH . How to Use plantiSMASH - Public Web Version # The easiest way to get started with plantiSMASH is to use the public webserver . See the Using plantiSMASH section of this documentation for more information on how to submit antiSMASH jobs and interpret the HTML output . The Glossary explains some of the abbreviations used in plantiSMASH and also provides an overview of the biosynthetic classes that antiSMASH can detect. Frequently occurring questions can be found in the FAQ section. Please consult the FAQs before raising an Issue on the antiSMASH GitHub page. How to Use plantiSMASH - Local Installation # If you need to run many analyses or custom analyses, please download and install a local copy of antiSMASH. Running large-scale analyses locally instead of on the webservice reduces the load and helps us to keep plantiSMASH available for everybody. For instructions on how to install antiSMASH locally, please see the Install Guide . For developers # This documentation is mainly addressed to users wanting to know more about the individual analyses of plantiSMASH. If you are interested in contributing to antiSMASH or in the technical design, please see the plantiSMASH GitHub Wiki . antiSMASH # If you want to know more about the antiSMASH framework, check the antiSMASH Documentation .","title":"Home"},{"location":"#plantismash-documentation","text":"Welcome to the documentation of plantiSMASH .","title":"plantiSMASH Documentation"},{"location":"#how-to-use-plantismash-public-web-version","text":"The easiest way to get started with plantiSMASH is to use the public webserver . See the Using plantiSMASH section of this documentation for more information on how to submit antiSMASH jobs and interpret the HTML output . The Glossary explains some of the abbreviations used in plantiSMASH and also provides an overview of the biosynthetic classes that antiSMASH can detect. Frequently occurring questions can be found in the FAQ section. Please consult the FAQs before raising an Issue on the antiSMASH GitHub page.","title":"How to Use plantiSMASH - Public Web Version"},{"location":"#how-to-use-plantismash-local-installation","text":"If you need to run many analyses or custom analyses, please download and install a local copy of antiSMASH. Running large-scale analyses locally instead of on the webservice reduces the load and helps us to keep plantiSMASH available for everybody. For instructions on how to install antiSMASH locally, please see the Install Guide .","title":"How to Use plantiSMASH - Local Installation"},{"location":"#for-developers","text":"This documentation is mainly addressed to users wanting to know more about the individual analyses of plantiSMASH. If you are interested in contributing to antiSMASH or in the technical design, please see the plantiSMASH GitHub Wiki .","title":"For developers"},{"location":"#antismash","text":"If you want to know more about the antiSMASH framework, check the antiSMASH Documentation .","title":"antiSMASH"},{"location":"about/","text":"About plantiSMASH # plantiSMASH allows the rapid genome-wide identification, annotation, and analysis of specialized metabolite biosynthetic gene clusters (BGCs) across the plant kingdom. It is a specialized extension of the widely used antiSMASH tool, tailored specifically to target plant genomes. plantiSMASH is powered by several open-source tools: NCBI BLAST+ Diamond HMMer 3 Muscle 3 GlimmerHMM CD-HIT PySVG JQuery SVG JQuery DataTables InCHlib vis.js pplacer GraPhlAn plantiSMASH contributors # plantiSMASH version 2.0 is the product of a collaborative effort between: Bioinformatics Group, Wageningen University & Research Department of Metabolic Biology, John Innes Centre, Norwich The Robert H. Smith Institute of Plant Sciences and Genetics in Agriculture, Hebrew University of Jerusalem DOE Joint Genome Institute, Lawrence Berkeley National Labs Supported by the Graduate School for Experimental Plant Sciences (EPS) and Vidi Grant VI.Vidi.213.183 from The Netherlands Organization for Scientific Research (NWO). How to cite # If you have found plantiSMASH useful, please cite: plantiSMASH: automated identification, annotation and expression analysis of plant biosynthetic gene clusters. Satria A. Kautsar, Hernando G Suarez Duran, Kai Blin, Anne Osbourn & Marnix H. Medema Nucleic Acids Research, 45(W1), W55-W63. (2017) https://doi.org/10.1093/nar/gkx305","title":"About"},{"location":"about/#about-plantismash","text":"plantiSMASH allows the rapid genome-wide identification, annotation, and analysis of specialized metabolite biosynthetic gene clusters (BGCs) across the plant kingdom. It is a specialized extension of the widely used antiSMASH tool, tailored specifically to target plant genomes. plantiSMASH is powered by several open-source tools: NCBI BLAST+ Diamond HMMer 3 Muscle 3 GlimmerHMM CD-HIT PySVG JQuery SVG JQuery DataTables InCHlib vis.js pplacer GraPhlAn","title":"About plantiSMASH"},{"location":"about/#plantismash-contributors","text":"plantiSMASH version 2.0 is the product of a collaborative effort between: Bioinformatics Group, Wageningen University & Research Department of Metabolic Biology, John Innes Centre, Norwich The Robert H. Smith Institute of Plant Sciences and Genetics in Agriculture, Hebrew University of Jerusalem DOE Joint Genome Institute, Lawrence Berkeley National Labs Supported by the Graduate School for Experimental Plant Sciences (EPS) and Vidi Grant VI.Vidi.213.183 from The Netherlands Organization for Scientific Research (NWO).","title":"plantiSMASH contributors"},{"location":"about/#how-to-cite","text":"If you have found plantiSMASH useful, please cite: plantiSMASH: automated identification, annotation and expression analysis of plant biosynthetic gene clusters. Satria A. Kautsar, Hernando G Suarez Duran, Kai Blin, Anne Osbourn & Marnix H. Medema Nucleic Acids Research, 45(W1), W55-W63. (2017) https://doi.org/10.1093/nar/gkx305","title":"How to cite"},{"location":"command_line/","text":"Command Line Use # The plantiSMASH command line tool comes with a built-in help system. Use python run_antismash.py -h to display help for the most common options, or python run_antismash.py --help-showall to get a description of all possible options. 1. Run a test dataset # 1.1. Run PlantiSMASH on a NCBI reference genome (genebank format) to test # mkdir -p test_datasets/Arabidopsis_thaliana cd test_datasets/Arabidopsis_thaliana datasets download genome accession GCF_000001735.4 --include gbff unzip ncbi_dataset.zip python ../../run_antismash.py --clusterblast --knownclusterblast --verbose --debug --limit -1 --taxon plants --outputfolder result/ ncbi_dataset/data/GCF_000001735.4/genomic.gbff # --clusterblast --knownclusterblast are optional 1.2. Run PlantiSMASH on a genome with gff3 + fasta # python run_antismash.py --verbose --debug --limit -1 --taxon plants --outputfolder result/ --use_phase --gff3 path/to/gff3/file path/to/fasta/file # Please check the error message. The genome names in the gff3 file may differ from those in the fasta file, causing an error. Note # It is recommended to change the output folder or delete it every time you run PlantiSMASH. Because when using the same output folder, files from the previous run may be partially preserved (only rewriting files with the same names). Customising output # Output directories and custom names for output can be specified, instead of using the input filename by default (see the --output family of arguments).","title":"Starting command line runs"},{"location":"command_line/#command-line-use","text":"The plantiSMASH command line tool comes with a built-in help system. Use python run_antismash.py -h to display help for the most common options, or python run_antismash.py --help-showall to get a description of all possible options.","title":"Command Line Use"},{"location":"command_line/#1-run-a-test-dataset","text":"","title":"1. Run a test dataset"},{"location":"command_line/#11-run-plantismash-on-a-ncbi-reference-genome-genebank-format-to-test","text":"mkdir -p test_datasets/Arabidopsis_thaliana cd test_datasets/Arabidopsis_thaliana datasets download genome accession GCF_000001735.4 --include gbff unzip ncbi_dataset.zip python ../../run_antismash.py --clusterblast --knownclusterblast --verbose --debug --limit -1 --taxon plants --outputfolder result/ ncbi_dataset/data/GCF_000001735.4/genomic.gbff # --clusterblast --knownclusterblast are optional","title":"1.1. Run PlantiSMASH on a NCBI reference genome (genebank format) to test"},{"location":"command_line/#12-run-plantismash-on-a-genome-with-gff3-fasta","text":"python run_antismash.py --verbose --debug --limit -1 --taxon plants --outputfolder result/ --use_phase --gff3 path/to/gff3/file path/to/fasta/file # Please check the error message. The genome names in the gff3 file may differ from those in the fasta file, causing an error.","title":"1.2. Run PlantiSMASH on a genome with gff3 + fasta"},{"location":"command_line/#note","text":"It is recommended to change the output folder or delete it every time you run PlantiSMASH. Because when using the same output folder, files from the previous run may be partially preserved (only rewriting files with the same names).","title":"Note"},{"location":"command_line/#customising-output","text":"Output directories and custom names for output can be specified, instead of using the input filename by default (see the --output family of arguments).","title":"Customising output"},{"location":"faq/","text":"Frequently Asked Questions # Can I run antiSMASH locally as a stand-alone program? # Yes. A stand-alone version of antiSMASH is available from the download page . Why doesn't plantiSMASH detect my gene cluster? # Some gene clusters, such as cofactor biosynthesis gene clusters are not identified by plantiSMASH, as they are categorized as primary metabolism instead of secondary metabolism. If you are aware of a true secondary metabolite biosynthesis gene cluster that escapes detection by antiSMASH, please contact us, and we will add the models necessary to detect it. Why are several genes upstream and downstream of gene clusters included, even though they do not seem to be part of the gene cluster? # In designing plantiSMASH, we tried to be very conservative in cutting gene cluster borders, leaving this to the expert eye of the user, as it is better to show some extra genes than to leave out key genes. Why is my BGC not detected in full? # The user can specify a different cutoff when running the program as a stand-alone program, by manually editing the cluster rules file, avaialble on the gitHub repository. If you run into such an issue, contact us or open a ticket on GitHub. Can I also submit an unannotated genome sequence in FASTA format? # To enable us to operate the plantiSMASH webserver with the resources available, users are expected to upload annotated Genbank-formatted or fasta files with gene/CDS annotations (i.e. fasta = gff3). Please first run your assembly on gene finding tools of your preference, such as AUGUSTUS or MAKER before submitting it into plantiSMASH. What is the privacy policy of plantiSMASH concerning my sequence data? # We keep this site and the data that it analyses as safe and secure as possible. The randomly generated URL ensures that your data cannot easily be found by third parties. Your output files will be periodically deleted from our server. However, sending your data to the web site is at your own risk. If you are concerned about the sensitivity of your data, please use the stand-alone version of our tool.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#can-i-run-antismash-locally-as-a-stand-alone-program","text":"Yes. A stand-alone version of antiSMASH is available from the download page .","title":"Can I run antiSMASH locally as a stand-alone program?"},{"location":"faq/#why-doesnt-plantismash-detect-my-gene-cluster","text":"Some gene clusters, such as cofactor biosynthesis gene clusters are not identified by plantiSMASH, as they are categorized as primary metabolism instead of secondary metabolism. If you are aware of a true secondary metabolite biosynthesis gene cluster that escapes detection by antiSMASH, please contact us, and we will add the models necessary to detect it.","title":"Why doesn't plantiSMASH detect my gene cluster?"},{"location":"faq/#why-are-several-genes-upstream-and-downstream-of-gene-clusters-included-even-though-they-do-not-seem-to-be-part-of-the-gene-cluster","text":"In designing plantiSMASH, we tried to be very conservative in cutting gene cluster borders, leaving this to the expert eye of the user, as it is better to show some extra genes than to leave out key genes.","title":"Why are several genes upstream and downstream of gene clusters included, even though they do not seem to be part of the gene cluster?"},{"location":"faq/#why-is-my-bgc-not-detected-in-full","text":"The user can specify a different cutoff when running the program as a stand-alone program, by manually editing the cluster rules file, avaialble on the gitHub repository. If you run into such an issue, contact us or open a ticket on GitHub.","title":"Why is my BGC not detected in full?"},{"location":"faq/#can-i-also-submit-an-unannotated-genome-sequence-in-fasta-format","text":"To enable us to operate the plantiSMASH webserver with the resources available, users are expected to upload annotated Genbank-formatted or fasta files with gene/CDS annotations (i.e. fasta = gff3). Please first run your assembly on gene finding tools of your preference, such as AUGUSTUS or MAKER before submitting it into plantiSMASH.","title":"Can I also submit an unannotated genome sequence in FASTA format?"},{"location":"faq/#what-is-the-privacy-policy-of-plantismash-concerning-my-sequence-data","text":"We keep this site and the data that it analyses as safe and secure as possible. The randomly generated URL ensures that your data cannot easily be found by third parties. Your output files will be periodically deleted from our server. However, sending your data to the web site is at your own risk. If you are concerned about the sensitivity of your data, please use the stand-alone version of our tool.","title":"What is the privacy policy of plantiSMASH concerning my sequence data?"},{"location":"glossary/","text":"Cluster types # plantiSMASH uses some abbreviations internally and in outputs to refer to the different types of secondary metabolite clusters detected. Cluster rules and associated HMM profiles are available in the plantiSMASH GitHub repository . Current Types # Putative cluster type Characterized by the presence of Added Last updated Detection Rule Updates alkaloid Bet_v_1, Cu_amine_oxid, Str_synth, BBE, Orn_DAP_Arg_deC, Pyridoxal_deC enzymes. 1.0 2.0 Added: BBE, Orn_DAP_Arg_deC, Pyridoxal_deC lignan Dirigent enzyme. 1.0 2.0 No changes saccharide Glycosyl transferases (1,2,28), UDPGT, Glyco_hydro, Cellulose_synt enzymes. 1.0 2.0 Added: Glyco_hydro_1, Cellulose_synt terpene Terpene_synth, Prenyltrans, SQHop_cyclase, PRISE enzymes. 1.0 2.0 No changes polyketide AMP-binding and Chal_sti_synt enzymes. 1.0 2.0 Now allows multiple detection rules: AMP-binding + Thr_dehydrat_C OR AMP-binding + Chal_sti_synt_C/N fatty acid AMP-binding, Transferase. 1.0 2.0 Added alternative detection rules: FA_desaturase, FA_desaturase_2, FA_hydroxylase, CER1-like_C mate MatE enzymes. 1.0 2.0 No changes sesterpene Terpene_synth_C, polyprenyl_synt. 1.0 2.0 No changes strictosidine-like Str_synth, Pyridoxal_deC enzymes. 1.0 2.0 No changes phenolamide Transferase, Pyridoxal_deC enzymes or Transferase, Orn_DAP_Arg_deC, Orn_Arg_deC_N enzymes. 1.0 2.0 Added alternative detection rules: Orn_DAP_Arg_deC, Orn_Arg_deC_N cyclopeptide BURP enzymes and putative peptide precursor repeat sequence. 2.0 2.0 No changes plant * Minimum of 4 enzyme domains from the full list. 1.0 2.0 No changes *Putative / uncategorized plant biosynthetic cluster. Deprecated or Merged Types # Putative cluster type Description Added Removed putative Putative / uncategorized biosynthetic cluster. 1.0 2.0 hybrid Biosynthetic cluster containing signature traces from both A and B secondary metabolite types. 1.0 2.0 Reference Links # For reference, you can find the detection rules for different plantiSMASH versions here: Version 1 Rules: View on GitHub Version 2 Rules: View on GitHub This glossary provides an overview of the secondary metabolite types detected by plantiSMASH. If you have any questions, refer to the documentation or reach out to the development team.","title":"Glossary"},{"location":"glossary/#cluster-types","text":"plantiSMASH uses some abbreviations internally and in outputs to refer to the different types of secondary metabolite clusters detected. Cluster rules and associated HMM profiles are available in the plantiSMASH GitHub repository .","title":"Cluster types"},{"location":"glossary/#current-types","text":"Putative cluster type Characterized by the presence of Added Last updated Detection Rule Updates alkaloid Bet_v_1, Cu_amine_oxid, Str_synth, BBE, Orn_DAP_Arg_deC, Pyridoxal_deC enzymes. 1.0 2.0 Added: BBE, Orn_DAP_Arg_deC, Pyridoxal_deC lignan Dirigent enzyme. 1.0 2.0 No changes saccharide Glycosyl transferases (1,2,28), UDPGT, Glyco_hydro, Cellulose_synt enzymes. 1.0 2.0 Added: Glyco_hydro_1, Cellulose_synt terpene Terpene_synth, Prenyltrans, SQHop_cyclase, PRISE enzymes. 1.0 2.0 No changes polyketide AMP-binding and Chal_sti_synt enzymes. 1.0 2.0 Now allows multiple detection rules: AMP-binding + Thr_dehydrat_C OR AMP-binding + Chal_sti_synt_C/N fatty acid AMP-binding, Transferase. 1.0 2.0 Added alternative detection rules: FA_desaturase, FA_desaturase_2, FA_hydroxylase, CER1-like_C mate MatE enzymes. 1.0 2.0 No changes sesterpene Terpene_synth_C, polyprenyl_synt. 1.0 2.0 No changes strictosidine-like Str_synth, Pyridoxal_deC enzymes. 1.0 2.0 No changes phenolamide Transferase, Pyridoxal_deC enzymes or Transferase, Orn_DAP_Arg_deC, Orn_Arg_deC_N enzymes. 1.0 2.0 Added alternative detection rules: Orn_DAP_Arg_deC, Orn_Arg_deC_N cyclopeptide BURP enzymes and putative peptide precursor repeat sequence. 2.0 2.0 No changes plant * Minimum of 4 enzyme domains from the full list. 1.0 2.0 No changes *Putative / uncategorized plant biosynthetic cluster.","title":"Current Types"},{"location":"glossary/#deprecated-or-merged-types","text":"Putative cluster type Description Added Removed putative Putative / uncategorized biosynthetic cluster. 1.0 2.0 hybrid Biosynthetic cluster containing signature traces from both A and B secondary metabolite types. 1.0 2.0","title":"Deprecated or Merged Types"},{"location":"glossary/#reference-links","text":"For reference, you can find the detection rules for different plantiSMASH versions here: Version 1 Rules: View on GitHub Version 2 Rules: View on GitHub This glossary provides an overview of the secondary metabolite types detected by plantiSMASH. If you have any questions, refer to the documentation or reach out to the development team.","title":"Reference Links"},{"location":"install/","text":"Download plantiSMASH Standalone # Stand-alone versions of plantiSMASH are available through our GitHub page . Current Release # The current standalone release is plantiSMASH 2.0-beta ( December 16th, 2024 ). Installation Options # There are two ways to install plantiSMASH: Downloading the standalone release \u2013 Suitable for users who want to install plantiSMASH from a zip package and ensure dependencies are installed separately. Cloning from the development branch \u2013 Recommended for users who want the latest development version and prefer managing dependencies in a virtual Conda environment. Option 1: Installing from the Standalone Release # Download the plantiSMASH standalone release from our GitHub repo: https://github.com/plantismash/plantismash/releases Ensure you have the following dependencies installed (tested versions in parentheses): Glimmer (3.02) GlimmerHMM (3.0.4) HMMER3 (3.3.2) FastTree (2.1.8) DIAMOND (2.0.15) MUSCLE (3.8.31) Prodigal (2.6.3) NCBI Blast+ (2.12.0) CD-HIT (4.8.1) LibXML2 (2.10.3) pplacer NCBI Datasets CLI (16.40.1) Unzip Helperlibs (0.2.1) Biopython (1.76) Once all dependencies are installed, plantiSMASH should be ready to use. Option 2: Cloning from the Development Branch # Using Windows? Click here for the full Windows Setup Guide . Clone the latest version from GitHub: git clone -b dev https://github.com/plantismash/plantismash.git cd plantismash If not installed already, conda/mamba can be installed by following these instructions: # install miniforge curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh # follow instructions and let it run `conda init` # set default channels source ~/.bashrc conda config --set auto_activate_base false source ~/.bashrc conda config --add channels bioconda conda config --add channels conda-forge conda config --set channel_priority strict Create and activate a Conda environment using the provided environment.yml file conda env create -f environment.yml conda activate plantismash Download the required databases: python download_databases.py Verify the installation python run_antismash.py -h","title":"Installation"},{"location":"install/#download-plantismash-standalone","text":"Stand-alone versions of plantiSMASH are available through our GitHub page .","title":"Download plantiSMASH Standalone"},{"location":"install/#current-release","text":"The current standalone release is plantiSMASH 2.0-beta ( December 16th, 2024 ).","title":"Current Release"},{"location":"install/#installation-options","text":"There are two ways to install plantiSMASH: Downloading the standalone release \u2013 Suitable for users who want to install plantiSMASH from a zip package and ensure dependencies are installed separately. Cloning from the development branch \u2013 Recommended for users who want the latest development version and prefer managing dependencies in a virtual Conda environment.","title":"Installation Options"},{"location":"install/#option-1-installing-from-the-standalone-release","text":"Download the plantiSMASH standalone release from our GitHub repo: https://github.com/plantismash/plantismash/releases Ensure you have the following dependencies installed (tested versions in parentheses): Glimmer (3.02) GlimmerHMM (3.0.4) HMMER3 (3.3.2) FastTree (2.1.8) DIAMOND (2.0.15) MUSCLE (3.8.31) Prodigal (2.6.3) NCBI Blast+ (2.12.0) CD-HIT (4.8.1) LibXML2 (2.10.3) pplacer NCBI Datasets CLI (16.40.1) Unzip Helperlibs (0.2.1) Biopython (1.76) Once all dependencies are installed, plantiSMASH should be ready to use.","title":"Option 1: Installing from the Standalone Release"},{"location":"install/#option-2-cloning-from-the-development-branch","text":"Using Windows? Click here for the full Windows Setup Guide . Clone the latest version from GitHub: git clone -b dev https://github.com/plantismash/plantismash.git cd plantismash If not installed already, conda/mamba can be installed by following these instructions: # install miniforge curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh # follow instructions and let it run `conda init` # set default channels source ~/.bashrc conda config --set auto_activate_base false source ~/.bashrc conda config --add channels bioconda conda config --add channels conda-forge conda config --set channel_priority strict Create and activate a Conda environment using the provided environment.yml file conda env create -f environment.yml conda activate plantismash Download the required databases: python download_databases.py Verify the installation python run_antismash.py -h","title":"Option 2: Cloning from the Development Branch"},{"location":"intro/","text":"Introduction #","title":"Introduction"},{"location":"intro/#introduction","text":"","title":"Introduction"},{"location":"running_locally/","text":"Running PlantiSMASH locally #","title":"Running PlantiSMASH locally"},{"location":"running_locally/#running-plantismash-locally","text":"","title":"Running PlantiSMASH locally"},{"location":"web_service/","text":"Running the plantiSMASH web service # This is the documentation on running the whole plantiSMASH web service setup. If you are just interested in running antiSMASH for yourself, you might not need this. Feel free to skip to the guide on submitting antiSMASH jobs . Recently, we have switched the whole setup to run in docker containers. Make sure you have a reasonably recent install of docker. This guide explains how to run the whole antiSMASH web service stack on a single machine. Larger production setups will be more complicated. Note that it's trivial to wrap this whole setup in a docker-compose file, but I'm running the appropriate commands via the docker CLI for increased flexibility. Overview # There are multiple components involved in running the antiSMASH webservice. Web App # The webapp is what the users interact with in their browsers. It is responsible for starting jobs, displaying the status of running jobs, and showing the results of completed jobs. Provided by the antismash/websmash image. Job Queue # The job queue is taking care of tracking everything concerning jobs. It is run on a Redis server. Provided by the redis image. antiSMASH instances # Individual jobs are run using the antiSMASH main executable. This is wrapped by a job runner that knows how to retrieve new jobs from the job queue, and how to pick the correct parameters depending on the user input. Provided by the antismash/runsmash-lite container. Job Status Monitor # Not shown on the schema, not absolutely required, but really nice to have is the status monitor tool that will make sure the web app can display the latest available status. Also provided by the antismash/runsmash-lite container. Shared setup # The web app, job runners and the status monitor need to have access to a shared directory. In this example, we will provide it on the host. In a more complex multi-host setup, you will want to put this on a shared filesystem. In all the below setups, the shared directory will be called /data/antismash/upload . If you are using a different directory, adjust accordingly. Setting up the job queue # This is straightforward and using the off the shelf redis image available on the docker hub. Run it using docker run --name antismash-redis redis . Setting up the antiSMASH job runner(s) # This step requires more work. First, set up the PFAM and ClusterBlast databases as described for the standalone-lite image . Once the databases are all set up, you can start up a runSMASH executable in the container like so: docker run --name antismash-run01 \\ --volume /data/antismash/upload:/upload:rw \\ --volume /data/databases:/databases:ro \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/runSMASH --queue redis://redis/0 \\ --workdir /upload \\ --statusdir /upload/status \\ --name runner01 \\ --cpus 8 Make sure to adjust the number of --cpus to the number you want to use per job. You can run multiple of these job runners, just make sure you use a different --name both for the docker run and the runSMASH commands. Setting up the antiSMASH job status monitor # This one is easier, just make sure to match the --statusdir to what you used for the runSMASH command if you changed that. Run: docker run --name antismash-watch \\ --volume /data/antismash/upload:/upload:rw \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/watchStatus --queue redis://redis/0 \\ --statusdir /upload/status Setting up the antiSMASH web interface # The web interface needs a file containing some settings. You will have to adjust those according to your local setup. An example settings file looks like this: ############# Configuration ############# DEBUG = False SECRET_KEY = \"replace this by a long random string\" RESULTS_PATH = '/upload' RESULTS_URL = '/upload' # Flask-Mail settings MAIL_SERVER = \"mail\" DEFAULT_MAIL_SENDER = \"antismash@example.org\" DEFAULT_RECIPIENTS = [\"antismash@example.org\"] # Flask-Redis settings REDIS_URL = \"redis://redis/0\" ######################################### Assuming you have saved this file as /data/antismash/websmash/settings.py , you can start the web interface like this: docker run --name antismash-web \\ --volume /data/antismash/upload:/upload \\ --volume /data/antismash/websmash:/config \\ --link antismash-redis:redis \\ --publish 5000:8000 \\ antismash/websmash Now the antiSMASH web interface is available on your local machine at port 5000 , ready to accept and process jobs.","title":"Web service"},{"location":"web_service/#running-the-plantismash-web-service","text":"This is the documentation on running the whole plantiSMASH web service setup. If you are just interested in running antiSMASH for yourself, you might not need this. Feel free to skip to the guide on submitting antiSMASH jobs . Recently, we have switched the whole setup to run in docker containers. Make sure you have a reasonably recent install of docker. This guide explains how to run the whole antiSMASH web service stack on a single machine. Larger production setups will be more complicated. Note that it's trivial to wrap this whole setup in a docker-compose file, but I'm running the appropriate commands via the docker CLI for increased flexibility.","title":"Running the plantiSMASH web service"},{"location":"web_service/#overview","text":"There are multiple components involved in running the antiSMASH webservice.","title":"Overview"},{"location":"web_service/#web-app","text":"The webapp is what the users interact with in their browsers. It is responsible for starting jobs, displaying the status of running jobs, and showing the results of completed jobs. Provided by the antismash/websmash image.","title":"Web App"},{"location":"web_service/#job-queue","text":"The job queue is taking care of tracking everything concerning jobs. It is run on a Redis server. Provided by the redis image.","title":"Job Queue"},{"location":"web_service/#antismash-instances","text":"Individual jobs are run using the antiSMASH main executable. This is wrapped by a job runner that knows how to retrieve new jobs from the job queue, and how to pick the correct parameters depending on the user input. Provided by the antismash/runsmash-lite container.","title":"antiSMASH instances"},{"location":"web_service/#job-status-monitor","text":"Not shown on the schema, not absolutely required, but really nice to have is the status monitor tool that will make sure the web app can display the latest available status. Also provided by the antismash/runsmash-lite container.","title":"Job Status Monitor"},{"location":"web_service/#shared-setup","text":"The web app, job runners and the status monitor need to have access to a shared directory. In this example, we will provide it on the host. In a more complex multi-host setup, you will want to put this on a shared filesystem. In all the below setups, the shared directory will be called /data/antismash/upload . If you are using a different directory, adjust accordingly.","title":"Shared setup"},{"location":"web_service/#setting-up-the-job-queue","text":"This is straightforward and using the off the shelf redis image available on the docker hub. Run it using docker run --name antismash-redis redis .","title":"Setting up the job queue"},{"location":"web_service/#setting-up-the-antismash-job-runners","text":"This step requires more work. First, set up the PFAM and ClusterBlast databases as described for the standalone-lite image . Once the databases are all set up, you can start up a runSMASH executable in the container like so: docker run --name antismash-run01 \\ --volume /data/antismash/upload:/upload:rw \\ --volume /data/databases:/databases:ro \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/runSMASH --queue redis://redis/0 \\ --workdir /upload \\ --statusdir /upload/status \\ --name runner01 \\ --cpus 8 Make sure to adjust the number of --cpus to the number you want to use per job. You can run multiple of these job runners, just make sure you use a different --name both for the docker run and the runSMASH commands.","title":"Setting up the antiSMASH job runner(s)"},{"location":"web_service/#setting-up-the-antismash-job-status-monitor","text":"This one is easier, just make sure to match the --statusdir to what you used for the runSMASH command if you changed that. Run: docker run --name antismash-watch \\ --volume /data/antismash/upload:/upload:rw \\ --link antismash-redis:redis \\ antismash/runsmash \\ /runsmash/watchStatus --queue redis://redis/0 \\ --statusdir /upload/status","title":"Setting up the antiSMASH job status monitor"},{"location":"web_service/#setting-up-the-antismash-web-interface","text":"The web interface needs a file containing some settings. You will have to adjust those according to your local setup. An example settings file looks like this: ############# Configuration ############# DEBUG = False SECRET_KEY = \"replace this by a long random string\" RESULTS_PATH = '/upload' RESULTS_URL = '/upload' # Flask-Mail settings MAIL_SERVER = \"mail\" DEFAULT_MAIL_SENDER = \"antismash@example.org\" DEFAULT_RECIPIENTS = [\"antismash@example.org\"] # Flask-Redis settings REDIS_URL = \"redis://redis/0\" ######################################### Assuming you have saved this file as /data/antismash/websmash/settings.py , you can start the web interface like this: docker run --name antismash-web \\ --volume /data/antismash/upload:/upload \\ --volume /data/antismash/websmash:/config \\ --link antismash-redis:redis \\ --publish 5000:8000 \\ antismash/websmash Now the antiSMASH web interface is available on your local machine at port 5000 , ready to accept and process jobs.","title":"Setting up the antiSMASH web interface"},{"location":"website_submission/","text":"Setting up your plantiSMASH job #","title":"Submitting jobs on the website"},{"location":"website_submission/#setting-up-your-plantismash-job","text":"","title":"Setting up your plantiSMASH job"},{"location":"windows-linux-setup/","text":"Setting Up plantiSMASH on Windows Without Linux # For users who do not have a Linux system installed, follow this guide to set up a Linux environment on Windows . Create a Linux Environment in Windows # Skip this step if using a Linux server. Refer to the WSL setup guide . Open the Windows command prompt: Press Win Key , search for \u2018command prompt\u2019, and select \u2018Run as administrator\u2019. Click \u2018Yes\u2019 when prompted by Windows to allow the app to make changes. Type in the command prompt: wsl.exe --install Wait for the installation to finish, and type \u2018Yes\u2019 if prompted. Restart your computer. Click on Ubuntu.exe to register Ubuntu. To have root as the administrator every time you start, use: sudo -s If any issues arise, unregister Ubuntu in PowerShell with: wsl --unregister Ubuntu Then click Ubuntu.exe to register Ubuntu again or visit your Linux server terminal.","title":"Windows linux setup"},{"location":"windows-linux-setup/#setting-up-plantismash-on-windows-without-linux","text":"For users who do not have a Linux system installed, follow this guide to set up a Linux environment on Windows .","title":"Setting Up plantiSMASH on Windows Without Linux"},{"location":"windows-linux-setup/#create-a-linux-environment-in-windows","text":"Skip this step if using a Linux server. Refer to the WSL setup guide . Open the Windows command prompt: Press Win Key , search for \u2018command prompt\u2019, and select \u2018Run as administrator\u2019. Click \u2018Yes\u2019 when prompted by Windows to allow the app to make changes. Type in the command prompt: wsl.exe --install Wait for the installation to finish, and type \u2018Yes\u2019 if prompted. Restart your computer. Click on Ubuntu.exe to register Ubuntu. To have root as the administrator every time you start, use: sudo -s If any issues arise, unregister Ubuntu in PowerShell with: wsl --unregister Ubuntu Then click Ubuntu.exe to register Ubuntu again or visit your Linux server terminal.","title":"Create a Linux Environment in Windows"},{"location":"changelog/2.0/","text":"The following changes include all those made between plantiSMASH 1.0 and plantiSMASH 2.0. Important notes # This release increases the minimum python version to 3.9 New features # Major #","title":"Version 2.0"},{"location":"changelog/2.0/#important-notes","text":"This release increases the minimum python version to 3.9","title":"Important notes"},{"location":"changelog/2.0/#new-features","text":"","title":"New features"},{"location":"changelog/2.0/#major","text":"","title":"Major"},{"location":"modules/clusterblast/","text":"ClusterBlast # There are three modes of the ClusterBlast alogorithm, all of which use the same algorithm and results visualisation, varying only in reference dataset: ClusterBlast : shows regions from the antiSMASH Database that are similar to the current region KnownClusterBlast : shows clusters from MIBiG that are similar to the current region SubClusterBlast : shows sub-cluster units related to the current region Interpreting results # Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes (e.g. modular systems such as NRPS or Type I PKS clusters). Ranking system # Reference areas are sorted first based on an empirical similarity score S\u2009=\u2009h\u2009+\u2009H\u2009+\u2009s\u2009+\u2009S\u2009+\u2009B , in which: - h is the number of query genes with a significant hit - H is the number of core query genes with a significant hit - s is the number of gene pairs with conserved synteny - S is the number of gene pairs with conserved synteny involving a core gene - and B is a core gene bonus If the similarity scores are equal, the hits are subsequently ranked based on the cumulative BlastP bit scores between the gene clusters. Similarity percentage # Similarity in the description, e.g. 87% of genes show similarity , is the percentage of genes within the reference that have a hit to any genes in the query. As gene hits are not required to be 100% identity and query genes may hit multiple reference genes, this total similarity percentage is no guarantee that the region is exactly the same. In the case of KnownClusterBlast, this also means that there is no guarantee that the compound(s) recorded for that MIBiG entry will be produce by the region. Even if 100% of genes have a hit for a reference, it may be less relevant than a lower similarity. Some cluster types, e.g. NRPS clusters, may only need a few aminos changed in gene translations to have a completely different product. In all cases, manual verification is required before assuming that the region produces the same compound as the reference. Example 1: low similarity, good match # Reference area R has 70% of genes showing similarity to the query region Q . All genes with hits are very high identity in their hits, at 95% or higher. The missing genes from R are all at one end of the reference area. These genes are also present in the genome antiSMASH was run on, but are outside Q due to the size of R being exceptionally large. After manually checking these extra genes and seeing that they're similar to the missing genes, it's much, much more likely that the genome matches the reference. Example 2: perfect similarity, poor match # Reference area R has 100% of genes showing similarity to the query region Q . None of the genes have a percentage identity in individual hits greater than 60%. While it is still possible that Q produces the same compound as R , it will depend a great deal on the type of cluster and exactly which parts of the genes are similar. Example 3: high similarity, poor match # Reference area R has very high (but not 100%) similarity, with all but one gene in R having similarity to genes in the query region Q . All of the matching genes have very high identity in their hits. The gene in R that is missing in Q should be in the middle of Q and is a core gene responsible for the scaffold of the compound. While it is still possible that Q produces the same compound as R , due to the functionality being present elsewhere, but it is much less likely.","title":"CLusterBLAST"},{"location":"modules/clusterblast/#clusterblast","text":"There are three modes of the ClusterBlast alogorithm, all of which use the same algorithm and results visualisation, varying only in reference dataset: ClusterBlast : shows regions from the antiSMASH Database that are similar to the current region KnownClusterBlast : shows clusters from MIBiG that are similar to the current region SubClusterBlast : shows sub-cluster units related to the current region","title":"ClusterBlast"},{"location":"modules/clusterblast/#interpreting-results","text":"Genes with matching colours are interrelated. Percentage identity values per hit are shown when clicking the gene in question, with a minimum percentage identity between genes of 30%. It is normal to have multiple genes hitting for some types of genes (e.g. modular systems such as NRPS or Type I PKS clusters).","title":"Interpreting results"},{"location":"modules/clusterblast/#ranking-system","text":"Reference areas are sorted first based on an empirical similarity score S\u2009=\u2009h\u2009+\u2009H\u2009+\u2009s\u2009+\u2009S\u2009+\u2009B , in which: - h is the number of query genes with a significant hit - H is the number of core query genes with a significant hit - s is the number of gene pairs with conserved synteny - S is the number of gene pairs with conserved synteny involving a core gene - and B is a core gene bonus If the similarity scores are equal, the hits are subsequently ranked based on the cumulative BlastP bit scores between the gene clusters.","title":"Ranking system"},{"location":"modules/clusterblast/#similarity-percentage","text":"Similarity in the description, e.g. 87% of genes show similarity , is the percentage of genes within the reference that have a hit to any genes in the query. As gene hits are not required to be 100% identity and query genes may hit multiple reference genes, this total similarity percentage is no guarantee that the region is exactly the same. In the case of KnownClusterBlast, this also means that there is no guarantee that the compound(s) recorded for that MIBiG entry will be produce by the region. Even if 100% of genes have a hit for a reference, it may be less relevant than a lower similarity. Some cluster types, e.g. NRPS clusters, may only need a few aminos changed in gene translations to have a completely different product. In all cases, manual verification is required before assuming that the region produces the same compound as the reference.","title":"Similarity percentage"},{"location":"modules/clusterblast/#example-1-low-similarity-good-match","text":"Reference area R has 70% of genes showing similarity to the query region Q . All genes with hits are very high identity in their hits, at 95% or higher. The missing genes from R are all at one end of the reference area. These genes are also present in the genome antiSMASH was run on, but are outside Q due to the size of R being exceptionally large. After manually checking these extra genes and seeing that they're similar to the missing genes, it's much, much more likely that the genome matches the reference.","title":"Example 1: low similarity, good match"},{"location":"modules/clusterblast/#example-2-perfect-similarity-poor-match","text":"Reference area R has 100% of genes showing similarity to the query region Q . None of the genes have a percentage identity in individual hits greater than 60%. While it is still possible that Q produces the same compound as R , it will depend a great deal on the type of cluster and exactly which parts of the genes are similar.","title":"Example 2: perfect similarity, poor match"},{"location":"modules/clusterblast/#example-3-high-similarity-poor-match","text":"Reference area R has very high (but not 100%) similarity, with all but one gene in R having similarity to genes in the query region Q . All of the matching genes have very high identity in their hits. The gene in R that is missing in Q should be in the middle of Q and is a core gene responsible for the scaffold of the compound. While it is still possible that Q produces the same compound as R , due to the functionality being present elsewhere, but it is much less likely.","title":"Example 3: high similarity, poor match"},{"location":"modules/clusterrules/","text":"In its rule-based BGC detection mode, plantiSMASH first runs a set of BGC-related HMM profiles on the input data and then uses manually curated rules to identify the BGCs. The currently used rules can be found at GitHub , and a summary is available here","title":"BGC detection"},{"location":"modules/tfbs/","text":"Transcription Factor Binding Site (TFBS) Prediction # Transcription factor binding sites are predicted using the LogoMotif profiles. On the region overview, predicted TFBS hits are shown with small black pins. In the \"TFBS Finder\" tab in the details panel, the different TFBS hit are shown with their binding site sequence and the surrounding genes for context. The \"TFBS Finder\" sidepanel contains an overview of all the TFBS hits found in the region.","title":"TFBS Finder"},{"location":"modules/tfbs/#transcription-factor-binding-site-tfbs-prediction","text":"Transcription factor binding sites are predicted using the LogoMotif profiles. On the region overview, predicted TFBS hits are shown with small black pins. In the \"TFBS Finder\" tab in the details panel, the different TFBS hit are shown with their binding site sequence and the surrounding genes for context. The \"TFBS Finder\" sidepanel contains an overview of all the TFBS hits found in the region.","title":"Transcription Factor Binding Site (TFBS) Prediction"},{"location":"understanding_output/","text":"Understanding plantiSMASH Output # Currently, there is no good method available to accurately predict gene cluster borders based purely on the submitted sequence data. Accordingly, antiSMASH predicts regions of interest on the input genomes. The overview page contains a summary of all regions found in all records/contigs within the input given to antiSMASH. Every region is described in more detail in its region results page .","title":"Understanding plantiSMASH Output"},{"location":"understanding_output/#understanding-plantismash-output","text":"Currently, there is no good method available to accurately predict gene cluster borders based purely on the submitted sequence data. Accordingly, antiSMASH predicts regions of interest on the input genomes. The overview page contains a summary of all regions found in all records/contigs within the input given to antiSMASH. Every region is described in more detail in its region results page .","title":"Understanding plantiSMASH Output"},{"location":"understanding_output/overview/","text":"Overview page # The overview page contains a summary of all regions found in all records/contigs within the input given to antiSMASH. At the top left of the page is the antiSMASH version information ( 1 ). Direct comparisons between antiSMASH results should use the same version for consistency, as results can change between versions. At the top right of the page are ancillary links that may be useful. Download allows you to download various parts of the results. About links to information about antiSMASH (including publications). Help links to these documentation pages. Finally, Contact links to a page with a form to send feedback or questions to the antiSMASH developers. Under the top bar are region buttons ( 2 ). These buttons are visible on all antiSMASH HTML pagesand can be used to quickly jump between regions. If a region is being viewed, the matching button for that region will be highlighted. Region buttons are in the form X.Y . For example, 5.7 would be the seventh region within the fifth record. Region buttons are color coded by predicted secondary metabolite type. Clicking the Overview button will bring you back to this page. Under these buttons are a summary of each record, each starting the name of the record ( 3 ) as given in the input file. At the top of the summary is an image ( 4 ) showing where the regions are located in the record. Following that is a table with a summary of each region found in the record, with each row ( 5 ) having the following fields: Region : the region number Type : the product types as detected by antiSMASH (clicking the types will take you to their description in these help pages) From , To : the location of the region (in nucleotides) Most similar known cluster : the closest compound from the MiBIG database (clicking this will take you to the MiBIG entry), along with its type (e.g. t1pks+t3pks ) Similarity : a percentage of genes within the closest known compound that have a significant BLAST hit to genes within the current region The last two columns containing comparisons to the MiBIG database will only be shown if antiSMASH was run with the KnownClusterBlast option. Clicking anywhere in the row that is not already an external link will take you to the detailed results for that region.","title":"Overview page"},{"location":"understanding_output/overview/#overview-page","text":"The overview page contains a summary of all regions found in all records/contigs within the input given to antiSMASH. At the top left of the page is the antiSMASH version information ( 1 ). Direct comparisons between antiSMASH results should use the same version for consistency, as results can change between versions. At the top right of the page are ancillary links that may be useful. Download allows you to download various parts of the results. About links to information about antiSMASH (including publications). Help links to these documentation pages. Finally, Contact links to a page with a form to send feedback or questions to the antiSMASH developers. Under the top bar are region buttons ( 2 ). These buttons are visible on all antiSMASH HTML pagesand can be used to quickly jump between regions. If a region is being viewed, the matching button for that region will be highlighted. Region buttons are in the form X.Y . For example, 5.7 would be the seventh region within the fifth record. Region buttons are color coded by predicted secondary metabolite type. Clicking the Overview button will bring you back to this page. Under these buttons are a summary of each record, each starting the name of the record ( 3 ) as given in the input file. At the top of the summary is an image ( 4 ) showing where the regions are located in the record. Following that is a table with a summary of each region found in the record, with each row ( 5 ) having the following fields: Region : the region number Type : the product types as detected by antiSMASH (clicking the types will take you to their description in these help pages) From , To : the location of the region (in nucleotides) Most similar known cluster : the closest compound from the MiBIG database (clicking this will take you to the MiBIG entry), along with its type (e.g. t1pks+t3pks ) Similarity : a percentage of genes within the closest known compound that have a significant BLAST hit to genes within the current region The last two columns containing comparisons to the MiBIG database will only be shown if antiSMASH was run with the KnownClusterBlast option. Clicking anywhere in the row that is not already an external link will take you to the detailed results for that region.","title":"Overview page"},{"location":"understanding_output/regions/","text":"The antiSMASH region concept # Currently, there is no good method available to accurately predict gene cluster borders based purely on the submitted sequence data (with the exception of the CASSIS algorithm, which is able to detect co-regulated genes in fungal genomes). In antiSMASH5, the display of gene clusters change to reflect the fact that the BGC borders are just offsets defined in the cluster detection rules, we renamed the highest level that is displayed to \u201cRegion\u201d. A region in antiSMASH 5 and above corresponds to the gene cluster annotation in antiSMASH 4 and earlier. How are antiSMASH regions defined? # In the first step, all gene products of the analyzed sequence are searched against a database of highly conserved enzyme HMM profiles (core-enzymes), which are indicative of a specific BGC type. In a second step, pre-defined cluster rules are employed to define individual protoclusters encoded in the region. These make up a core , which is extended by its neighbourhood , which constiutes of genes encoded up- and downstream of the core . Here is an example of a rule for detecting a protocluster for a type I PKS: Whenever antiSMASH finds a gene coding for a protein that has as PKS_AT domain and a PKS_KS domain of various sub-types, a new \u201cType I PKS protocluster \u201d feature is generated within the region; this feature comprises the core gene-product(s) that trigger the rule (i.e. the PKS encoding genes and extends the neighborhood to the left and right of the core genes by 20 kb to the left and right (as defined by the EXTENT parameter in the rule definition). The values for the different cluster types are empirically determined and generally tend to overpredict, i.e. included also adjacent genes. After the protocluster features are assigned (note: there can be multiple protocluster features within a single region ), they are checked for overlaps (as defined by the CUTOFF parameter) and are grouped into several types of candidate clusters to reflect the observation that many BGCs actually comprise several classes of biosynthetic machinery. For example glycopeptides like vancomycin or balhimycin (shown) are synthesized via NRPS, but also contain a type III PKS as a precursor pathway. Thus, the displayed region contains the NRPS protocluster (green bar) and a T3PKS protocluster (yellow bar). As their neighbourhoods overlap, they are assigned to a candidate cluster . Candidate cluster types # Chemical hybrid # These candidate clusters contains protoclusters which share cluster-defining CDS/genes/gene products. They will also include protoclusters within that shared range that do not share a CDS, provided that they are completely contained within the supercluster border. For example, case A in the image above. In the example, CDS 1 and 2 define the protocluster of type A, and CDS 2 and 4 define the protocluster of type B. Since both protoclusters share a CDS that defines those protoclusters, a chemical hybrid candidate cluster is created. If CDS 4 and some later CDS were also contributing to a third protocluster type, it would be merged into this same candidate cluster. If CDS 3 defined another protocluster which did not extend past CDS 1 or 4, then that new protocluster would also be included in the chemical hybrid, under the assumption that it is relevant to the other protoclusters. Interleaved # These candidate clusters contain protoclusters which do not share cluster-defining CDS features, but their core locations overlap, e.g. case B in the image above. \u2003 Neighbouring # These candidate clusters are the weakest form of hybrid candidates. They contain protoclusters which do not match either chemical or interleaved variants, but transitively overlap in their neighbourhoods. Every protocluster in a \"neighbouring candidate cluster\" will also belong to one of the other kinds of candidate clusters, including the single kind, described below, excepting cases where it would be a single candidate and have the exact coordinates of the neighbouring candidate cluster. Single # This kind of candidate clusters exists where only one protocluster is contained, e.g. case D . It exists only for internal consistency. A single candidate cluster will not exist for a protocluster which is contained in either a chemical hybrid or an interleaved candidate cluster, but will exist for each inside a neighbouring candidate. For example, both protoclusters in case C will have an independent single candidate, along with the neighbouring .","title":"Region concept"},{"location":"understanding_output/regions/#the-antismash-region-concept","text":"Currently, there is no good method available to accurately predict gene cluster borders based purely on the submitted sequence data (with the exception of the CASSIS algorithm, which is able to detect co-regulated genes in fungal genomes). In antiSMASH5, the display of gene clusters change to reflect the fact that the BGC borders are just offsets defined in the cluster detection rules, we renamed the highest level that is displayed to \u201cRegion\u201d. A region in antiSMASH 5 and above corresponds to the gene cluster annotation in antiSMASH 4 and earlier.","title":"The antiSMASH region concept"},{"location":"understanding_output/regions/#how-are-antismash-regions-defined","text":"In the first step, all gene products of the analyzed sequence are searched against a database of highly conserved enzyme HMM profiles (core-enzymes), which are indicative of a specific BGC type. In a second step, pre-defined cluster rules are employed to define individual protoclusters encoded in the region. These make up a core , which is extended by its neighbourhood , which constiutes of genes encoded up- and downstream of the core . Here is an example of a rule for detecting a protocluster for a type I PKS: Whenever antiSMASH finds a gene coding for a protein that has as PKS_AT domain and a PKS_KS domain of various sub-types, a new \u201cType I PKS protocluster \u201d feature is generated within the region; this feature comprises the core gene-product(s) that trigger the rule (i.e. the PKS encoding genes and extends the neighborhood to the left and right of the core genes by 20 kb to the left and right (as defined by the EXTENT parameter in the rule definition). The values for the different cluster types are empirically determined and generally tend to overpredict, i.e. included also adjacent genes. After the protocluster features are assigned (note: there can be multiple protocluster features within a single region ), they are checked for overlaps (as defined by the CUTOFF parameter) and are grouped into several types of candidate clusters to reflect the observation that many BGCs actually comprise several classes of biosynthetic machinery. For example glycopeptides like vancomycin or balhimycin (shown) are synthesized via NRPS, but also contain a type III PKS as a precursor pathway. Thus, the displayed region contains the NRPS protocluster (green bar) and a T3PKS protocluster (yellow bar). As their neighbourhoods overlap, they are assigned to a candidate cluster .","title":"How are antiSMASH regions defined?"},{"location":"understanding_output/regions/#candidate-cluster-types","text":"","title":"Candidate cluster types"},{"location":"understanding_output/regions/#chemical-hybrid","text":"These candidate clusters contains protoclusters which share cluster-defining CDS/genes/gene products. They will also include protoclusters within that shared range that do not share a CDS, provided that they are completely contained within the supercluster border. For example, case A in the image above. In the example, CDS 1 and 2 define the protocluster of type A, and CDS 2 and 4 define the protocluster of type B. Since both protoclusters share a CDS that defines those protoclusters, a chemical hybrid candidate cluster is created. If CDS 4 and some later CDS were also contributing to a third protocluster type, it would be merged into this same candidate cluster. If CDS 3 defined another protocluster which did not extend past CDS 1 or 4, then that new protocluster would also be included in the chemical hybrid, under the assumption that it is relevant to the other protoclusters.","title":"Chemical hybrid"},{"location":"understanding_output/regions/#interleaved","text":"These candidate clusters contain protoclusters which do not share cluster-defining CDS features, but their core locations overlap, e.g. case B in the image above.","title":"Interleaved"},{"location":"understanding_output/regions/#neighbouring","text":"These candidate clusters are the weakest form of hybrid candidates. They contain protoclusters which do not match either chemical or interleaved variants, but transitively overlap in their neighbourhoods. Every protocluster in a \"neighbouring candidate cluster\" will also belong to one of the other kinds of candidate clusters, including the single kind, described below, excepting cases where it would be a single candidate and have the exact coordinates of the neighbouring candidate cluster.","title":"Neighbouring"},{"location":"understanding_output/regions/#single","text":"This kind of candidate clusters exists where only one protocluster is contained, e.g. case D . It exists only for internal consistency. A single candidate cluster will not exist for a protocluster which is contained in either a chemical hybrid or an interleaved candidate cluster, but will exist for each inside a neighbouring candidate. For example, both protoclusters in case C will have an independent single candidate, along with the neighbouring .","title":"Single"},{"location":"understanding_output/results/","text":"Region Results page # In the upper panel, \"Gene cluster description\", information is given about each gene cluster that was detected. In the upper line, the biosynthetic type and location of the gene cluster are displayed. Underneath this title line, all genes present in a detected gene cluster are outlined. The borders of the gene clusters have been estimated using different greedily chosen cut-offs specified per gene cluster type. Genes are color coded by predicted function. Putative biosynthetic genes are colored red, transport-related genes are colored blue, and regulation-related genes are colored green. These predictions depend on the smCOG functionality an will be missing if you chose to not run smCOG predictions. Hovering over a gene with the mouse will prompt the gene name to be displayed above the gene. Gene details # Clicking the gene will provide more information on the gene: identifiers, existing product annotation, gene functions (including smCOG, or secondary metabolism gene family, if enabled), its location, and cross-links specific to that gene. Detailed annotation # In the middle panel, \"Detailed annotation\", you can find more in-depth information on the selected gene cluster. Individual prediction tools will add tabs here to provide their results. Detailed annotation for PKS/NRPS domains # For predicted modular polyketide synthase (PKS) and/or nonribosomal peptide synthetase (NRPS) proteins, you will find the domain annotations and any modules that are detected. The module overlays can be hidden by enabling the \"Show module domains\" option. Clicking on a domain will display more information, such as the name of the detected domain, its precise location, any substrate specificites or other predictions, and a link to run Blast on the domain. A list of detected domains can be found here . Identifying similar BGCs # The tab \"Homologous gene clusters\", displays the top ten gene clusters from the internal antiSMASH database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast hits between them. Similar information is provided in the \"KnownCluserBlast folder\", which detects BGCs included in the curated MIBiG dataset. \"SubClusterBlast\" provides information about conserved operons, which, for example are involved in precursor biosynthesis of non-proteinogenic amino acids. Transcription Factor Binding Sites prediction # The Transcription Factor Binding Sites tab is explained on its own page . Prediction of putative core sturctures # In the upper side panel on the right. \"Predicted core structure\", a rough prediction of the overall chemical structure of a the product of a detected nonribosomal peptide or polyketide biosynthesis gene cluster is given. The second folder \"PKS/NRPS monomers\" displays detailed predictions for all monomers. Prediction details are available for multiple methods. PKS type I AT domain specificities are predicted using a twenty-four amino acid signature sequence of the active site (Yadav et al., 2003), as well as with pHMMs based on the method of Minowa et al. (Minowa et al., 2007), which is also used to predict co-enzyme A ligase domain specificities. NRPS A domain specificities are predicted using both the signature sequence method and the support-vector machines-based method of NRPSPredictor2 (Rausch et al., 2005 & R\u00f6ttig et al., 2011), and the method of Minowa et al. (Minowa et al., 2007). Ketoreductase domain-based stereochemistry predictions for PKSs (Starcevic et al., 2008) are also performed. For PKS type II clusters, the side panel shows a list of the predicted starter units along with bitscores, a list of the predicted number of malonyl elongations along with bitscores, the predicted product class, a list of product molecular weights predictions for each combination of starter unit and number of malonyl elongations. Furthermore, it displays each gene/protein that is involved in the polyketide biosynthesis of the cluster. For each gene/protein the type is indicated and for some a prediction of function is displayed. More details on the predictions can be found here . A chemical structure is displayed for NRPS and Type I PKS metabolites, which is derived by combining the results of the domain analyses. IMPORTANT NOTE: This is a structure prediction of the core structure of the molecule; it is very likely the final molecule will be different! Downloading results # In the upper right, a small list of buttons offers further functionality. The question-mark button will get you to this help page. The exclamation-mark button leads to a page explaining about antiSMASH. The downward-pointing arrow will open a menu offering to download the complete set of results from the antiSMASH run, a summary GenBank output file, or a log file for debug purposes. The GenBank file can be viewed in a genome browser such as Artemis. Results on the public webserver are only kept for ONE month and will be deleted afterwards. It is highly recommended that you download the full result set before they expire.","title":"Results page"},{"location":"understanding_output/results/#region-results-page","text":"In the upper panel, \"Gene cluster description\", information is given about each gene cluster that was detected. In the upper line, the biosynthetic type and location of the gene cluster are displayed. Underneath this title line, all genes present in a detected gene cluster are outlined. The borders of the gene clusters have been estimated using different greedily chosen cut-offs specified per gene cluster type. Genes are color coded by predicted function. Putative biosynthetic genes are colored red, transport-related genes are colored blue, and regulation-related genes are colored green. These predictions depend on the smCOG functionality an will be missing if you chose to not run smCOG predictions. Hovering over a gene with the mouse will prompt the gene name to be displayed above the gene.","title":"Region Results page"},{"location":"understanding_output/results/#gene-details","text":"Clicking the gene will provide more information on the gene: identifiers, existing product annotation, gene functions (including smCOG, or secondary metabolism gene family, if enabled), its location, and cross-links specific to that gene.","title":"Gene details"},{"location":"understanding_output/results/#detailed-annotation","text":"In the middle panel, \"Detailed annotation\", you can find more in-depth information on the selected gene cluster. Individual prediction tools will add tabs here to provide their results.","title":"Detailed annotation"},{"location":"understanding_output/results/#detailed-annotation-for-pksnrps-domains","text":"For predicted modular polyketide synthase (PKS) and/or nonribosomal peptide synthetase (NRPS) proteins, you will find the domain annotations and any modules that are detected. The module overlays can be hidden by enabling the \"Show module domains\" option. Clicking on a domain will display more information, such as the name of the detected domain, its precise location, any substrate specificites or other predictions, and a link to run Blast on the domain. A list of detected domains can be found here .","title":"Detailed annotation for PKS/NRPS domains"},{"location":"understanding_output/results/#identifying-similar-bgcs","text":"The tab \"Homologous gene clusters\", displays the top ten gene clusters from the internal antiSMASH database that are most similar to a detected gene cluster, visually aligned to it. The drop-down selection menu can be used to browse through the gene clusters. Genes with the same colour are putative homologs based on significant Blast hits between them. Similar information is provided in the \"KnownCluserBlast folder\", which detects BGCs included in the curated MIBiG dataset. \"SubClusterBlast\" provides information about conserved operons, which, for example are involved in precursor biosynthesis of non-proteinogenic amino acids.","title":"Identifying similar BGCs"},{"location":"understanding_output/results/#transcription-factor-binding-sites-prediction","text":"The Transcription Factor Binding Sites tab is explained on its own page .","title":"Transcription Factor Binding Sites prediction"},{"location":"understanding_output/results/#prediction-of-putative-core-sturctures","text":"In the upper side panel on the right. \"Predicted core structure\", a rough prediction of the overall chemical structure of a the product of a detected nonribosomal peptide or polyketide biosynthesis gene cluster is given. The second folder \"PKS/NRPS monomers\" displays detailed predictions for all monomers. Prediction details are available for multiple methods. PKS type I AT domain specificities are predicted using a twenty-four amino acid signature sequence of the active site (Yadav et al., 2003), as well as with pHMMs based on the method of Minowa et al. (Minowa et al., 2007), which is also used to predict co-enzyme A ligase domain specificities. NRPS A domain specificities are predicted using both the signature sequence method and the support-vector machines-based method of NRPSPredictor2 (Rausch et al., 2005 & R\u00f6ttig et al., 2011), and the method of Minowa et al. (Minowa et al., 2007). Ketoreductase domain-based stereochemistry predictions for PKSs (Starcevic et al., 2008) are also performed. For PKS type II clusters, the side panel shows a list of the predicted starter units along with bitscores, a list of the predicted number of malonyl elongations along with bitscores, the predicted product class, a list of product molecular weights predictions for each combination of starter unit and number of malonyl elongations. Furthermore, it displays each gene/protein that is involved in the polyketide biosynthesis of the cluster. For each gene/protein the type is indicated and for some a prediction of function is displayed. More details on the predictions can be found here . A chemical structure is displayed for NRPS and Type I PKS metabolites, which is derived by combining the results of the domain analyses. IMPORTANT NOTE: This is a structure prediction of the core structure of the molecule; it is very likely the final molecule will be different!","title":"Prediction of putative core sturctures"},{"location":"understanding_output/results/#downloading-results","text":"In the upper right, a small list of buttons offers further functionality. The question-mark button will get you to this help page. The exclamation-mark button leads to a page explaining about antiSMASH. The downward-pointing arrow will open a menu offering to download the complete set of results from the antiSMASH run, a summary GenBank output file, or a log file for debug purposes. The GenBank file can be viewed in a genome browser such as Artemis. Results on the public webserver are only kept for ONE month and will be deleted afterwards. It is highly recommended that you download the full result set before they expire.","title":"Downloading results"}]}